; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\Output\stm32f4xx_it.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\Output\stm32f4xx_it.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -ID:\Keil\ARM\RV31\Inc -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\ST\STM32F4xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX --omf_browse=..\Output\stm32f4xx_it.crf ..\User\stm32f4xx_it.c]
                          THUMB

                          AREA ||i.BusFault_Handler||, CODE, READONLY, ALIGN=1

                  BusFault_Handler PROC
                  |L1.0|
;;;105      */
;;;106    void BusFault_Handler(void)
000000  e7fe              B        |L1.0|
;;;107    {
;;;108      /* Go to infinite loop when Bus Fault exception occurs */
;;;109      while (1)
;;;110      {
;;;111      }
;;;112    }
;;;113    
                          ENDP


                          AREA ||i.CRC16||, CODE, READONLY, ALIGN=1

                  CRC16 PROC
;;;275    
;;;276    uint16_t CRC16(uint8_t *puchMsg, uint8_t Len)
000000  b570              PUSH     {r4-r6,lr}
;;;277    {
;;;278    	uint8_t t, m,n,p;
;;;279    	uint8_t uchCRCHi=0xFF; /* 高CRC字节初始化*/ 
000002  23ff              MOVS     r3,#0xff
;;;280    	uint8_t uchCRCLo =0xFF; /* 低CRC 字节初始化*/ 
000004  22ff              MOVS     r2,#0xff
;;;281    	for(t=0;t<Len;t++)
000006  2500              MOVS     r5,#0
000008  e018              B        |L2.60|
                  |L2.10|
;;;282    	{	
;;;283    		uchCRCLo=uchCRCLo^puchMsg[t];
00000a  5d44              LDRB     r4,[r0,r5]
00000c  4062              EORS     r2,r2,r4
;;;284    		for(n=0;n<8;n++)
00000e  2400              MOVS     r4,#0
                  |L2.16|
;;;285    		{
;;;286    			m=uchCRCLo&1;p=uchCRCHi&1;uchCRCHi>>=1;
000010  f0020601          AND      r6,r2,#1
000014  f0030c01          AND      r12,r3,#1
000018  085b              LSRS     r3,r3,#1
;;;287    			uchCRCLo>>=1;
00001a  0852              LSRS     r2,r2,#1
;;;288    
;;;289    			if(p)
00001c  f1bc0f00          CMP      r12,#0
000020  d001              BEQ      |L2.38|
;;;290    			{
;;;291    				uchCRCLo|=0x80;
000022  f0420280          ORR      r2,r2,#0x80
                  |L2.38|
;;;292    			}
;;;293    			if(m)	
000026  b11e              CBZ      r6,|L2.48|
;;;294    			{
;;;295    				uchCRCHi=uchCRCHi^0xa0;
000028  f08303a0          EOR      r3,r3,#0xa0
;;;296    				uchCRCLo=uchCRCLo^1;
00002c  f0820201          EOR      r2,r2,#1
                  |L2.48|
000030  1c64              ADDS     r4,r4,#1              ;284
000032  b2e4              UXTB     r4,r4                 ;284
000034  2c08              CMP      r4,#8                 ;284
000036  d3eb              BCC      |L2.16|
000038  1c6d              ADDS     r5,r5,#1              ;281
00003a  b2ed              UXTB     r5,r5                 ;281
                  |L2.60|
00003c  428d              CMP      r5,r1                 ;281
00003e  d3e4              BCC      |L2.10|
;;;297    			}
;;;298    		}
;;;299    	}
;;;300    	return (uchCRCHi<<8|uchCRCLo);
000040  ea422003          ORR      r0,r2,r3,LSL #8
;;;301    }
000044  bd70              POP      {r4-r6,pc}
;;;302    
                          ENDP


                          AREA ||i.DMA2_Stream0_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA2_Stream0_IRQHandler PROC
;;;187    
;;;188    void  DMA2_Stream0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;189    {
;;;190    	DMA_ClearITPendingBit(DMA2_Stream0,DMA_IT_TCIF0);
000002  4905              LDR      r1,|L3.24|
000004  4805              LDR      r0,|L3.28|
000006  f7fffffe          BL       DMA_ClearITPendingBit
;;;191    	Flag_ADC_Full=1;
00000a  4805              LDR      r0,|L3.32|
00000c  6801              LDR      r1,[r0,#0]  ; flagA
00000e  f0410102          ORR      r1,r1,#2
000012  6001              STR      r1,[r0,#0]  ; flagA
;;;192    }
000014  bd10              POP      {r4,pc}
;;;193    
                          ENDP

000016  0000              DCW      0x0000
                  |L3.24|
                          DCD      0x10008020
                  |L3.28|
                          DCD      0x40026410
                  |L3.32|
                          DCD      flagA

                          AREA ||i.DebugMon_Handler||, CODE, READONLY, ALIGN=1

                  DebugMon_Handler PROC
;;;140      */
;;;141    void DebugMon_Handler(void)
000000  4770              BX       lr
;;;142    {
;;;143    }
;;;144    
                          ENDP


                          AREA ||i.HardFault_Handler||, CODE, READONLY, ALIGN=1

                  HardFault_Handler PROC
                  |L5.0|
;;;79       */
;;;80     void HardFault_Handler(void)
000000  e7fe              B        |L5.0|
;;;81     {
;;;82       /* Go to infinite loop when Hard Fault exception occurs */
;;;83       while (1)
;;;84       {
;;;85       }
;;;86     }
;;;87     
                          ENDP


                          AREA ||i.MemManage_Handler||, CODE, READONLY, ALIGN=1

                  MemManage_Handler PROC
                  |L6.0|
;;;92       */
;;;93     void MemManage_Handler(void)
000000  e7fe              B        |L6.0|
;;;94     {
;;;95       /* Go to infinite loop when Memory Manage exception occurs */
;;;96       while (1)
;;;97       {
;;;98       }
;;;99     }
;;;100    
                          ENDP


                          AREA ||i.NMI_Handler||, CODE, READONLY, ALIGN=1

                  NMI_Handler PROC
;;;70       */
;;;71     void NMI_Handler(void)
000000  4770              BX       lr
;;;72     {
;;;73     }
;;;74     
                          ENDP


                          AREA ||i.PendSV_Handler||, CODE, READONLY, ALIGN=1

                  PendSV_Handler PROC
;;;149      */
;;;150    void PendSV_Handler(void)
000000  4770              BX       lr
;;;151    {
;;;152    }
;;;153    
                          ENDP


                          AREA ||i.SVC_Handler||, CODE, READONLY, ALIGN=1

                  SVC_Handler PROC
;;;131      */
;;;132    void SVC_Handler(void)
000000  4770              BX       lr
;;;133    {
;;;134    }
;;;135    
                          ENDP


                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=2

                  SysTick_Handler PROC
;;;158      */
;;;159    void SysTick_Handler(void)
000000  b510              PUSH     {r4,lr}
;;;160    {
;;;161    	TimingDelay_Decrement();
000002  f7fffffe          BL       TimingDelay_Decrement
;;;162    	OS_TimeMS++;
000006  4918              LDR      r1,|L10.104|
000008  6808              LDR      r0,[r1,#0]  ; OS_TimeMS
00000a  1c40              ADDS     r0,r0,#1
00000c  6008              STR      r0,[r1,#0]  ; OS_TimeMS
;;;163    	t_KeyScan++;
00000e  4817              LDR      r0,|L10.108|
000010  7801              LDRB     r1,[r0,#0]  ; t_KeyScan
000012  1c49              ADDS     r1,r1,#1
000014  7001              STRB     r1,[r0,#0]
;;;164    	if(t_KeyScan>10)
000016  7803              LDRB     r3,[r0,#0]  ; t_KeyScan
;;;165    	{
;;;166    		t_KeyScan=0;
;;;167    		Flag_Key_Scan=1;//д?л???
000018  4a15              LDR      r2,|L10.112|
00001a  2100              MOVS     r1,#0                 ;166
00001c  2b0a              CMP      r3,#0xa               ;164
00001e  d904              BLS      |L10.42|
000020  7001              STRB     r1,[r0,#0]            ;166
000022  6810              LDR      r0,[r2,#0]  ; flagA
000024  f0400008          ORR      r0,r0,#8
000028  6010              STR      r0,[r2,#0]  ; flagA
                  |L10.42|
;;;168    	}
;;;169    	t_0_5S++;
00002a  4812              LDR      r0,|L10.116|
00002c  8803              LDRH     r3,[r0,#0]  ; t_0_5S
00002e  1c5b              ADDS     r3,r3,#1
000030  8003              STRH     r3,[r0,#0]
;;;170    	if(t_0_5S>20)
000032  8803              LDRH     r3,[r0,#0]  ; t_0_5S
000034  2b14              CMP      r3,#0x14
000036  d904              BLS      |L10.66|
;;;171    	{
;;;172    		t_0_5S=0;
000038  8001              STRH     r1,[r0,#0]
;;;173    		Flag_0_5S =1;//???Ь????
00003a  6810              LDR      r0,[r2,#0]  ; flagA
00003c  f0400080          ORR      r0,r0,#0x80
000040  6010              STR      r0,[r2,#0]  ; flagA
                  |L10.66|
;;;174    	}
;;;175    //--------------------------------------------
;;;176    	if(flag_Tim_USART==1)//???￡??
000042  4b0d              LDR      r3,|L10.120|
;;;177    	{
;;;178    		t_USART++;
000044  4a0d              LDR      r2,|L10.124|
000046  6818              LDR      r0,[r3,#0]            ;176  ; flagD
000048  07c4              LSLS     r4,r0,#31             ;176
00004a  d002              BEQ      |L10.82|
00004c  7814              LDRB     r4,[r2,#0]  ; t_USART
00004e  1c64              ADDS     r4,r4,#1
000050  7014              STRB     r4,[r2,#0]
                  |L10.82|
;;;179    	}
;;;180    	if(t_USART>40)//??2.6ms
000052  7814              LDRB     r4,[r2,#0]  ; t_USART
000054  2c28              CMP      r4,#0x28
000056  d905              BLS      |L10.100|
;;;181    	{
;;;182    		t_USART=0;
000058  7011              STRB     r1,[r2,#0]
;;;183    		flag_Tim_USART=0;
00005a  f0200001          BIC      r0,r0,#1
00005e  6018              STR      r0,[r3,#0]  ; flagD
;;;184    		UART_Buffer_Size=0;	
000060  4807              LDR      r0,|L10.128|
000062  7001              STRB     r1,[r0,#0]
                  |L10.100|
;;;185    	}
;;;186    }
000064  bd10              POP      {r4,pc}
;;;187    
                          ENDP

000066  0000              DCW      0x0000
                  |L10.104|
                          DCD      OS_TimeMS
                  |L10.108|
                          DCD      t_KeyScan
                  |L10.112|
                          DCD      flagA
                  |L10.116|
                          DCD      t_0_5S
                  |L10.120|
                          DCD      flagD
                  |L10.124|
                          DCD      t_USART
                  |L10.128|
                          DCD      UART_Buffer_Size

                          AREA ||i.TIM6_DAC_IRQHandler||, CODE, READONLY, ALIGN=2

                  TIM6_DAC_IRQHandler PROC
;;;193    
;;;194    void  TIM6_DAC_IRQHandler (void)
000000  2101              MOVS     r1,#1
;;;195    {
;;;196    	TIM_ClearITPendingBit(TIM6,TIM_IT_Update);//?????λ
000002  4801              LDR      r0,|L11.8|
000004  f7ffbffe          B.W      TIM_ClearITPendingBit
;;;197    }
;;;198    
                          ENDP

                  |L11.8|
                          DCD      0x40001000

                          AREA ||i.UART5_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART5_IRQHandler PROC
;;;302    
;;;303    void UART5_IRQHandler(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;304    {
;;;305        static vu8 count;
;;;306        u8 res,i;
;;;307        static u16 crc;
;;;308        static vu8 check[7];
;;;309        static vu16 cal;
;;;310    //    u16 crch;
;;;311        if(USART_GetITStatus(UART5, USART_IT_RXNE) != RESET)
000004  4e27              LDR      r6,|L12.164|
000006  f2405725          MOV      r7,#0x525
00000a  4639              MOV      r1,r7
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       USART_GetITStatus
000012  2800              CMP      r0,#0
000014  d043              BEQ      |L12.158|
;;;312        {
;;;313            res = USART_ReceiveData(UART5);
000016  4630              MOV      r0,r6
000018  f7fffffe          BL       USART_ReceiveData
;;;314            Rec_buff[count] = res;
00001c  4d23              LDR      r5,|L12.172|
00001e  4c22              LDR      r4,|L12.168|
000020  78a9              LDRB     r1,[r5,#2]  ; count
000022  5460              STRB     r0,[r4,r1]
;;;315            count ++;
000024  78a8              LDRB     r0,[r5,#2]  ; count
000026  1c40              ADDS     r0,r0,#1
000028  70a8              STRB     r0,[r5,#2]
;;;316            if(count > 8)
00002a  78a8              LDRB     r0,[r5,#2]  ; count
00002c  2808              CMP      r0,#8
00002e  d930              BLS      |L12.146|
;;;317            {
;;;318                for(i=0;i<7;i++)
000030  2200              MOVS     r2,#0
;;;319                {
;;;320                    check[i] = Rec_buff[i];
000032  f1050314          ADD      r3,r5,#0x14
                  |L12.54|
000036  5ca0              LDRB     r0,[r4,r2]
000038  5498              STRB     r0,[r3,r2]
00003a  1c52              ADDS     r2,r2,#1              ;318
00003c  b2d2              UXTB     r2,r2                 ;318
00003e  2a07              CMP      r2,#7                 ;318
000040  d3f9              BCC      |L12.54|
;;;321                }
;;;322                crc = Rec_buff[8]<<8;
000042  7a20              LDRB     r0,[r4,#8]  ; Rec_buff
000044  0200              LSLS     r0,r0,#8
;;;323                crc = crc + Rec_buff[7];
000046  79e1              LDRB     r1,[r4,#7]  ; Rec_buff
000048  4408              ADD      r0,r0,r1
00004a  80a8              STRH     r0,[r5,#4]
;;;324                cal = CRC16(check,7);
00004c  4817              LDR      r0,|L12.172|
00004e  2107              MOVS     r1,#7
000050  3014              ADDS     r0,r0,#0x14
000052  f7fffffe          BL       CRC16
000056  80e8              STRH     r0,[r5,#6]
;;;325                if(crc == cal)
000058  88a8              LDRH     r0,[r5,#4]  ; crc
00005a  88ea              LDRH     r2,[r5,#6]  ; cal
00005c  2100              MOVS     r1,#0                 ;318
00005e  4290              CMP      r0,r2
000060  d116              BNE      |L12.144|
;;;326                {
;;;327                    if(Rec_buff[5] == 0x0C && Rec_buff[6] == 0x45 && crc == 0x9D82)
000062  7962              LDRB     r2,[r4,#5]  ; Rec_buff
000064  2a0c              CMP      r2,#0xc
000066  d108              BNE      |L12.122|
000068  79a2              LDRB     r2,[r4,#6]  ; Rec_buff
00006a  2a45              CMP      r2,#0x45
00006c  d105              BNE      |L12.122|
00006e  f5a0421d          SUB      r2,r0,#0x9d00
000072  3a82              SUBS     r2,r2,#0x82
000074  d101              BNE      |L12.122|
;;;328                    {
;;;329                        NTCR = 0;
000076  8129              STRH     r1,[r5,#8]
000078  e00a              B        |L12.144|
                  |L12.122|
;;;330                    }else{
;;;331                        NTCR = Rec_buff[5]<<8;
00007a  7960              LDRB     r0,[r4,#5]  ; Rec_buff
00007c  0200              LSLS     r0,r0,#8
00007e  8128              STRH     r0,[r5,#8]
;;;332                        NTCR = NTCR + Rec_buff[6];
000080  79a0              LDRB     r0,[r4,#6]  ; Rec_buff
000082  892a              LDRH     r2,[r5,#8]  ; NTCR
000084  4410              ADD      r0,r0,r2
000086  8128              STRH     r0,[r5,#8]
;;;333                        Runit = Rec_buff[4]&0x0F;
000088  7920              LDRB     r0,[r4,#4]  ; Rec_buff
00008a  f000000f          AND      r0,r0,#0xf
00008e  70e8              STRB     r0,[r5,#3]
                  |L12.144|
;;;334                    }                               
;;;335                }
;;;336                count = 0;
000090  70a9              STRB     r1,[r5,#2]
                  |L12.146|
;;;337            }
;;;338            USART_ClearITPendingBit(UART5, USART_IT_RXNE);
000092  4639              MOV      r1,r7
000094  4630              MOV      r0,r6
000096  e8bd41f0          POP      {r4-r8,lr}
00009a  f7ffbffe          B.W      USART_ClearITPendingBit
                  |L12.158|
;;;339        }
;;;340    }
00009e  e8bd81f0          POP      {r4-r8,pc}
;;;341    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L12.164|
                          DCD      0x40005000
                  |L12.168|
                          DCD      ||.bss||
                  |L12.172|
                          DCD      ||.data||

                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;198    
;;;199    void USART1_IRQHandler(void)
000000  b570              PUSH     {r4-r6,lr}
;;;200    {
;;;201    	flag_Tim_USART=1;
000002  4c1d              LDR      r4,|L13.120|
000004  6820              LDR      r0,[r4,#0]  ; flagD
000006  f0400001          ORR      r0,r0,#1
00000a  6020              STR      r0,[r4,#0]  ; flagD
;;;202     	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
00000c  4d1b              LDR      r5,|L13.124|
00000e  f2405125          MOV      r1,#0x525
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       USART_GetITStatus
000018  2800              CMP      r0,#0
00001a  d01c              BEQ      |L13.86|
;;;203    	{
;;;204    		UART_Buffer_Rece[UART_Buffer_Size]=USART_ReceiveData(USART1);
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       USART_ReceiveData
000022  4918              LDR      r1,|L13.132|
000024  4a16              LDR      r2,|L13.128|
000026  780b              LDRB     r3,[r1,#0]  ; UART_Buffer_Size
000028  54d0              STRB     r0,[r2,r3]
;;;205    		UART_Buffer_Size++;
00002a  7808              LDRB     r0,[r1,#0]  ; UART_Buffer_Size
00002c  1c40              ADDS     r0,r0,#1
00002e  7008              STRB     r0,[r1,#0]
;;;206    		if (UART_Buffer_Size > 7)
000030  7808              LDRB     r0,[r1,#0]  ; UART_Buffer_Size
000032  2807              CMP      r0,#7
000034  d90f              BLS      |L13.86|
;;;207    		{
;;;208    			if (UART_Buffer_Rece[1] == 16)
000036  7856              LDRB     r6,[r2,#1]  ; UART_Buffer_Rece
;;;209    			{	
;;;210    				if (UART_Buffer_Size > (UART_Buffer_Rece[6]+8))
;;;211    				{
;;;212    					UART_Buffer_Size=0;	  	   		   
000038  2300              MOVS     r3,#0
;;;213    					UART_Buffer_Rece_flag=1;
00003a  4813              LDR      r0,|L13.136|
;;;214    					flag_Tim_USART=0;
;;;215    					t_USART=0;
00003c  4d13              LDR      r5,|L13.140|
00003e  2e10              CMP      r6,#0x10              ;208
000040  d00a              BEQ      |L13.88|
;;;216    				}
;;;217    			}
;;;218    			else
;;;219    			{
;;;220    				UART_Buffer_Size=0;	  	   	   
000042  700b              STRB     r3,[r1,#0]
;;;221    				UART_Buffer_Rece_flag=1;  
000044  6801              LDR      r1,[r0,#0]  ; flagA
000046  f0410120          ORR      r1,r1,#0x20
00004a  6001              STR      r1,[r0,#0]  ; flagA
;;;222    				flag_Tim_USART=0;
00004c  6820              LDR      r0,[r4,#0]  ; flagD
00004e  f0200001          BIC      r0,r0,#1
000052  6020              STR      r0,[r4,#0]  ; flagD
;;;223    				t_USART=0;
000054  702b              STRB     r3,[r5,#0]
                  |L13.86|
;;;224    			}	  
;;;225    		}
;;;226    	}
;;;227    }
000056  bd70              POP      {r4-r6,pc}
                  |L13.88|
000058  7992              LDRB     r2,[r2,#6]            ;210  ; UART_Buffer_Rece
00005a  780e              LDRB     r6,[r1,#0]            ;210  ; UART_Buffer_Size
00005c  3208              ADDS     r2,r2,#8              ;210
00005e  42b2              CMP      r2,r6                 ;210
000060  d2f9              BCS      |L13.86|
000062  700b              STRB     r3,[r1,#0]            ;212
000064  6801              LDR      r1,[r0,#0]            ;213  ; flagA
000066  f0410120          ORR      r1,r1,#0x20           ;213
00006a  6001              STR      r1,[r0,#0]            ;213  ; flagA
00006c  6820              LDR      r0,[r4,#0]            ;214  ; flagD
00006e  f0200001          BIC      r0,r0,#1              ;214
000072  6020              STR      r0,[r4,#0]            ;214  ; flagD
000074  702b              STRB     r3,[r5,#0]            ;215
000076  bd70              POP      {r4-r6,pc}
;;;228    void USART3_IRQHandler(void)
                          ENDP

                  |L13.120|
                          DCD      flagD
                  |L13.124|
                          DCD      0x40011000
                  |L13.128|
                          DCD      UART_Buffer_Rece
                  |L13.132|
                          DCD      UART_Buffer_Size
                  |L13.136|
                          DCD      flagA
                  |L13.140|
                          DCD      t_USART

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;227    }
;;;228    void USART3_IRQHandler(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;229    {
000004  ed2d8b02          VPUSH    {d8}
;;;230        static vu8 count = 0;
;;;231        u8 res; 
;;;232        static vu8 i = 0;
;;;233        static float sum;
;;;234        if(USART_GetITStatus(USART3, USART_IT_RXNE) != RESET)
000008  f2405725          MOV      r7,#0x525
00000c  4e35              LDR      r6,|L14.228|
00000e  4639              MOV      r1,r7
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       USART_GetITStatus
000016  2800              CMP      r0,#0
000018  d05f              BEQ      |L14.218|
;;;235        {
;;;236            
;;;237            res =USART_ReceiveData(USART3);//(USART1->DR); //????????
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       USART_ReceiveData
000020  b2c2              UXTB     r2,r0
;;;238            if(count == 0)
000022  4c31              LDR      r4,|L14.232|
000024  7820              LDRB     r0,[r4,#0]  ; count
;;;239            {
;;;240                if(res == 0x03)
;;;241                {
;;;242                    count = 1;
;;;243                }else{
;;;244                    count = 0;
000026  2500              MOVS     r5,#0
000028  b178              CBZ      r0,|L14.74|
;;;245                }
;;;246            }else if(count == 1){
00002a  7820              LDRB     r0,[r4,#0]  ; count
00002c  2801              CMP      r0,#1
00002e  d013              BEQ      |L14.88|
;;;247                 if(res == 0xff)
;;;248                {
;;;249                    count = 2;
;;;250                }else{
;;;251                    count = 0;
;;;252                }
;;;253                
;;;254            }else if(count > 1 && count <4)
000030  7821              LDRB     r1,[r4,#0]  ; count
;;;255            {
;;;256                UART_Buffer_Rece[count] = res;               
000032  482e              LDR      r0,|L14.236|
000034  2901              CMP      r1,#1                 ;254
000036  d916              BLS      |L14.102|
000038  7821              LDRB     r1,[r4,#0]            ;254  ; count
00003a  2904              CMP      r1,#4                 ;254
00003c  d213              BCS      |L14.102|
00003e  7821              LDRB     r1,[r4,#0]  ; count
000040  5442              STRB     r2,[r0,r1]
;;;257    //            temp = (UART_Buffer_Rece[2] * 256 + UART_Buffer_Rece[3])/10.0;
;;;258                count ++;
000042  7820              LDRB     r0,[r4,#0]  ; count
000044  1c40              ADDS     r0,r0,#1
000046  7020              STRB     r0,[r4,#0]
000048  e03f              B        |L14.202|
                  |L14.74|
00004a  2a03              CMP      r2,#3                 ;240
00004c  d001              BEQ      |L14.82|
00004e  7025              STRB     r5,[r4,#0]            ;244
000050  e03b              B        |L14.202|
                  |L14.82|
000052  2001              MOVS     r0,#1                 ;242
000054  7020              STRB     r0,[r4,#0]            ;242
000056  e038              B        |L14.202|
                  |L14.88|
000058  2aff              CMP      r2,#0xff              ;247
00005a  d001              BEQ      |L14.96|
00005c  7025              STRB     r5,[r4,#0]            ;251
00005e  e034              B        |L14.202|
                  |L14.96|
000060  2002              MOVS     r0,#2                 ;249
000062  7020              STRB     r0,[r4,#0]            ;249
000064  e031              B        |L14.202|
                  |L14.102|
;;;259            }else if(count == 4)
000066  7821              LDRB     r1,[r4,#0]  ; count
000068  2904              CMP      r1,#4
00006a  d12e              BNE      |L14.202|
;;;260            {
;;;261                if(i < 10)
00006c  7861              LDRB     r1,[r4,#1]  ; i
;;;262                {
;;;263                 sum += (UART_Buffer_Rece[2] * 256 + UART_Buffer_Rece[3])/10.0;
00006e  ed9f8b20          VLDR     d8,|L14.240|
000072  290a              CMP      r1,#0xa               ;261
000074  d216              BCS      |L14.164|
000076  78c1              LDRB     r1,[r0,#3]  ; UART_Buffer_Rece
000078  7880              LDRB     r0,[r0,#2]  ; UART_Buffer_Rece
00007a  eb012000          ADD      r0,r1,r0,LSL #8
00007e  f7fffffe          BL       __aeabi_ui2d
000082  ec532b18          VMOV     r2,r3,d8
000086  f7fffffe          BL       __aeabi_ddiv
00008a  ec410b18          VMOV     d8,r0,r1
00008e  68e0              LDR      r0,[r4,#0xc]  ; sum
000090  f7fffffe          BL       __aeabi_f2d
000094  ec532b18          VMOV     r2,r3,d8
000098  f7fffffe          BL       __aeabi_dadd
00009c  f7fffffe          BL       __aeabi_d2f
0000a0  60e0              STR      r0,[r4,#0xc]  ; sum
0000a2  e00e              B        |L14.194|
                  |L14.164|
;;;264                }else{
;;;265                    temp = sum/10.0;
0000a4  68e0              LDR      r0,[r4,#0xc]  ; sum
0000a6  f7fffffe          BL       __aeabi_f2d
0000aa  ec532b18          VMOV     r2,r3,d8
0000ae  f7fffffe          BL       __aeabi_ddiv
0000b2  f7fffffe          BL       __aeabi_d2f
0000b6  6120              STR      r0,[r4,#0x10]  ; temp
;;;266                    sum = 0;
0000b8  ed9f0a0f          VLDR     s0,|L14.248|
0000bc  ed840a03          VSTR     s0,[r4,#0xc]
;;;267                    i = 0;
0000c0  7065              STRB     r5,[r4,#1]
                  |L14.194|
;;;268                }
;;;269                 count =0;
0000c2  7025              STRB     r5,[r4,#0]
;;;270                 i ++;
0000c4  7860              LDRB     r0,[r4,#1]  ; i
0000c6  1c40              ADDS     r0,r0,#1
0000c8  7060              STRB     r0,[r4,#1]
                  |L14.202|
;;;271            }
;;;272            USART_ClearITPendingBit(USART3, USART_IT_RXNE);
0000ca  4639              MOV      r1,r7
0000cc  ecbd8b02          VPOP     {d8}
0000d0  4630              MOV      r0,r6
0000d2  e8bd41f0          POP      {r4-r8,lr}
0000d6  f7ffbffe          B.W      USART_ClearITPendingBit
                  |L14.218|
;;;273         }
;;;274    }
0000da  ecbd8b02          VPOP     {d8}
0000de  e8bd81f0          POP      {r4-r8,pc}
;;;275    
                          ENDP

0000e2  0000              DCW      0x0000
                  |L14.228|
                          DCD      0x40004800
                  |L14.232|
                          DCD      ||.data||
                  |L14.236|
                          DCD      UART_Buffer_Rece
                  |L14.240|
0000f0  00000000          DCFD     0x4024000000000000 ; 10
0000f4  40240000
                  |L14.248|
0000f8  00000000          DCFS     0x00000000 ; 0

                          AREA ||i.UsageFault_Handler||, CODE, READONLY, ALIGN=1

                  UsageFault_Handler PROC
                  |L15.0|
;;;118      */
;;;119    void UsageFault_Handler(void)
000000  e7fe              B        |L15.0|
;;;120    {
;;;121      /* Go to infinite loop when Usage Fault exception occurs */
;;;122      while (1)
;;;123      {
;;;124      }
;;;125    }
;;;126    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  Rec_buff
                          %        9

                          AREA ||.data||, DATA, ALIGN=2

                  count
000000  00                DCB      0x00
                  i
000001  00                DCB      0x00
                  |symbol_number.43|
000002  00                DCB      0x00
                  Runit
000003  00                DCB      0x00
                  ||crc||
000004  0000              DCB      0x00,0x00
                  ||cal||
000006  0000              DCB      0x00,0x00
                  NTCR
000008  00000000          DCB      0x00,0x00,0x00,0x00
                  ||sum||
                          DCD      0x00000000
                  temp
                          DCD      0x00000000
                  check
                          DCD      0x00000000
000018  000000            DCB      0x00,0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\User\\stm32f4xx_it.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_stm32f4xx_it_c_bb8ca80c____REV16|
#line 114 "D:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_stm32f4xx_it_c_bb8ca80c____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___14_stm32f4xx_it_c_bb8ca80c____REVSH|
#line 128
|__asm___14_stm32f4xx_it_c_bb8ca80c____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
