; generated by ARM C/C++ Compiler, 4.1 [Build 894]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o..\Output\modbus.o --asm_dir=..\Listing\ --list_dir=..\Listing\ --depend=..\Output\modbus.d --cpu=Cortex-M4.fp --apcs=interwork -O1 --diag_suppress=870 -I..\APP -I..\drive -I..\Include -I..\Libraries\CMSIS\inc -I..\Libraries\CMSIS\src -I..\Libraries\FWlib\inc -I..\Libraries\FWlib\src -I..\Listing -I..\Output -I..\Project -I..\STemWinLibrary522\Config -I..\STemWinLibrary522\emWinTask -I..\STemWinLibrary522\GUILib -I..\STemWinLibrary522\inc -I..\User -I..\USB\STM32_USB_HOST_Library\Class\HID\inc -I..\USB\STM32_USB_HOST_Library\Class\MSC\src -I..\USB\STM32_USB_HOST_Library\Core\src -I..\USB\USB_APP -I..\USB\STM32_USB_HOST_Library\Class\HID\src -I..\USB\STM32_USB_HOST_Library\Class\MSC\inc -I..\USB\STM32_USB_HOST_Library\Core\inc -I..\USB\STM32_USB_OTG_Driver\inc -I..\FATFS\exfuns -I..\FATFS\src\option -I..\FATFS\src -I..\MALLOC -ID:\Keil\ARM\RV31\Inc -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\ST\STM32F4xx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS -DSTM32F40XX --omf_browse=..\Output\modbus.crf ..\drive\modbus.c]
                          THUMB

                          AREA ||i.Hardware_CRC||, CODE, READONLY, ALIGN=1

                  Hardware_CRC PROC
;;;890    //-----------------------------CRC检测--------------------------------------------//
;;;891    vu16 Hardware_CRC(vu8 *p_buffer,vu8 count)    //CRC16
000000  b530              PUSH     {r4,r5,lr}
;;;892    {
000002  4603              MOV      r3,r0
;;;893    	vu16 CRC_Result=0xffff;
000004  f64f70ff          MOV      r0,#0xffff
;;;894    	vu8 i;
;;;895    	if(count==0)
000008  b901              CBNZ     r1,|L1.12|
;;;896    	{
;;;897    		count=1;
00000a  2101              MOVS     r1,#1
                  |L1.12|
;;;898    	}
;;;899    	while(count--)
;;;900    	{
;;;901    		CRC_Result^=*p_buffer;
;;;902    		for(i=0;i<8;i++)
;;;903    		{
;;;904    			if(CRC_Result&1)
;;;905    			{
;;;906    				CRC_Result>>=1;
;;;907    				CRC_Result^=0xA001;
00000c  f24a0401          MOV      r4,#0xa001
;;;908    			}
;;;909    			else 
;;;910    			{
;;;911    				CRC_Result>>=1;
;;;912    			}
;;;913    		}
;;;914    		p_buffer++;
000010  e00e              B        |L1.48|
                  |L1.18|
000012  781a              LDRB     r2,[r3,#0]            ;901
000014  4050              EORS     r0,r0,r2              ;901
000016  2200              MOVS     r2,#0                 ;902
000018  e007              B        |L1.42|
                  |L1.26|
00001a  07c5              LSLS     r5,r0,#31             ;904
00001c  d002              BEQ      |L1.36|
00001e  0840              LSRS     r0,r0,#1              ;906
000020  4060              EORS     r0,r0,r4              ;907
000022  e000              B        |L1.38|
                  |L1.36|
000024  0840              LSRS     r0,r0,#1              ;911
                  |L1.38|
000026  1c52              ADDS     r2,r2,#1              ;902
000028  b2d2              UXTB     r2,r2                 ;902
                  |L1.42|
00002a  2a08              CMP      r2,#8                 ;902
00002c  d3f5              BCC      |L1.26|
00002e  1c5b              ADDS     r3,r3,#1
                  |L1.48|
000030  000a              MOVS     r2,r1                 ;899
000032  f1a10101          SUB      r1,r1,#1              ;899
000036  b2c9              UXTB     r1,r1                 ;899
000038  d1eb              BNE      |L1.18|
;;;915    	}
;;;916    	return CRC_Result;
;;;917    }
00003a  bd30              POP      {r4,r5,pc}
                          ENDP


                          AREA ||i.Transformation_ADC||, CODE, READONLY, ALIGN=2

                  Transformation_ADC PROC
;;;651    //===============================AD值转换成测量值============================================//
;;;652    void Transformation_ADC(void)  
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;653    {
;;;654    	vu32 var32;
;;;655    	vu32 var32a;
;;;656    /*****************************内阻测量电压转换*******************************************/
;;;657    	var32 = Vmon1_value;
000004  48b8              LDR      r0,|L2.744|
000006  6800              LDR      r0,[r0,#0]  ; Vmon1_value
;;;658    	var32 = var32 * REG_CorrectionV;  
000008  4ab8              LDR      r2,|L2.748|
00000a  6811              LDR      r1,[r2,#0]  ; Correct_Parametet
00000c  4341              MULS     r1,r0,r1
;;;659    	if ((Polar & 0x01) == 0x01)		  
00000e  4bb8              LDR      r3,|L2.752|
000010  7818              LDRB     r0,[r3,#0]  ; correct_por
000012  07c4              LSLS     r4,r0,#31
;;;660    	{
;;;661    		if (var32 < REG_ReadV_Offset) 
000014  f1020034          ADD      r0,r2,#0x34
000018  d007              BEQ      |L2.42|
00001a  6804              LDR      r4,[r0,#0]  ; Correct_Strong
00001c  428c              CMP      r4,r1
00001e  d901              BLS      |L2.36|
;;;662    		{
;;;663    			var32 = 0;
000020  2100              MOVS     r1,#0
000022  e004              B        |L2.46|
                  |L2.36|
;;;664    		}
;;;665    		else var32 = var32 - REG_ReadV_Offset;
000024  6804              LDR      r4,[r0,#0]  ; Correct_Strong
000026  1b09              SUBS     r1,r1,r4
000028  e001              B        |L2.46|
                  |L2.42|
;;;666    	}
;;;667    	else var32 = var32 + REG_ReadV_Offset;
00002a  6804              LDR      r4,[r0,#0]  ; Correct_Strong
00002c  4421              ADD      r1,r1,r4
                  |L2.46|
;;;668    	var32 = var32 >> 12;
00002e  0b09              LSRS     r1,r1,#12
;;;669    	if (var32 < 30) var32 = 0;				  //40mV以下清零
000030  291e              CMP      r1,#0x1e
000032  d200              BCS      |L2.54|
000034  2100              MOVS     r1,#0
                  |L2.54|
;;;670    	Voltage = var32;
000036  4cad              LDR      r4,|L2.748|
000038  3468              ADDS     r4,r4,#0x68
00003a  62a1              STR      r1,[r4,#0x28]  ; Run_Control
;;;671    	DISS_Voltage=Voltage;
00003c  6aa1              LDR      r1,[r4,#0x28]  ; Run_Control
00003e  ee001a10          VMOV     s0,r1
000042  49ac              LDR      r1,|L2.756|
000044  eef80a40          VCVT.F32.U32 s1,s0
;;;672    	DISS_Voltage=DISS_Voltage/1000;//计算显示电压
000048  ed9f0aab          VLDR     s0,|L2.760|
00004c  ee801a80          VDIV.F32 s2,s1,s0
000050  ed811a00          VSTR     s2,[r1,#0]
;;;673    	var32 = 0;
;;;674    	/*******************负载测量电流转换**************************************/
;;;675    	var32 = Imon1_value;
000054  49a9              LDR      r1,|L2.764|
000056  680d              LDR      r5,[r1,#0]  ; Imon1_value
;;;676    	var32 = var32 * REG_Load_A;  
000058  6851              LDR      r1,[r2,#4]  ; Correct_Parametet
00005a  4369              MULS     r1,r5,r1
;;;677    	if ((Polar1 & 0x01) == 0x01)		  
00005c  785d              LDRB     r5,[r3,#1]  ; correct_por
00005e  07ed              LSLS     r5,r5,#31
000060  d007              BEQ      |L2.114|
;;;678    	{
;;;679    		if (var32 < REG_LoadA_Offset) 
000062  6845              LDR      r5,[r0,#4]  ; Correct_Strong
000064  428d              CMP      r5,r1
000066  d901              BLS      |L2.108|
;;;680    		{
;;;681    			var32 = 0;
000068  2100              MOVS     r1,#0
00006a  e004              B        |L2.118|
                  |L2.108|
;;;682    		}
;;;683    		else var32 = var32 - REG_LoadA_Offset;
00006c  6845              LDR      r5,[r0,#4]  ; Correct_Strong
00006e  1b49              SUBS     r1,r1,r5
000070  e001              B        |L2.118|
                  |L2.114|
;;;684    	}
;;;685    	else var32 = var32 + REG_LoadA_Offset;
000072  6845              LDR      r5,[r0,#4]  ; Correct_Strong
000074  4429              ADD      r1,r1,r5
                  |L2.118|
;;;686    	var32 = var32 >> 12;
000076  0b09              LSRS     r1,r1,#12
;;;687    	Laod_Current = var32;
000078  6321              STR      r1,[r4,#0x30]  ; Run_Control
;;;688    	DISS_Current=Laod_Current;
00007a  6b21              LDR      r1,[r4,#0x30]  ; Run_Control
00007c  4da0              LDR      r5,|L2.768|
00007e  ee001a90          VMOV     s1,r1
000082  eef80a60          VCVT.F32.U32 s1,s1
;;;689    	DISS_Current=DISS_Current/1000;//计算显示电流
000086  ee801a80          VDIV.F32 s2,s1,s0
00008a  ed851a00          VSTR     s2,[r5,#0]
;;;690    	var32 = 0;	
;;;691    	/*************************负载电压和电流控制转换**************************************/
;;;692    	if(flag_Load_CC==1)
00008e  499d              LDR      r1,|L2.772|
;;;693    	{
;;;694    		var32 = SET_Current_Laod;
;;;695    		var32=var32<<12;   
;;;696    		if ((Polar1 & 0x04) == 0)			   
;;;697    		{
;;;698    			if (var32 < SET_LoadA_Offset) var32 = 0;
;;;699    			else var32 = var32 - SET_LoadA_Offset;
;;;700    		}
;;;701    		else var32 = var32 + SET_LoadA_Offset;
;;;702    		var32 = var32/SET_LoadA;
;;;703    		var32=var32>>1;
;;;704    		if(Flag_DAC_OFF==0)
;;;705    		{
;;;706    			Contr_Laod = var32;
000090  f8dfc278          LDR      r12,|L2.780|
000094  f04f0600          MOV      r6,#0                 ;663
000098  6809              LDR      r1,[r1,#0]            ;692  ; flagD
00009a  ea5f6801          LSLS     r8,r1,#24             ;692
00009e  499a              LDR      r1,|L2.776|
0000a0  680f              LDR      r7,[r1,#0]            ;692
0000a2  d522              BPL      |L2.234|
0000a4  6921              LDR      r1,[r4,#0x10]         ;694  ; Run_Control
0000a6  0309              LSLS     r1,r1,#12             ;695
0000a8  f8938001          LDRB     r8,[r3,#1]            ;696  ; correct_por
0000ac  ea5f7848          LSLS     r8,r8,#29             ;696
0000b0  d40a              BMI      |L2.200|
0000b2  f8d08008          LDR      r8,[r0,#8]            ;698  ; Correct_Strong
0000b6  4588              CMP      r8,r1                 ;698
0000b8  d901              BLS      |L2.190|
0000ba  2100              MOVS     r1,#0                 ;698
0000bc  e007              B        |L2.206|
                  |L2.190|
0000be  f8d08008          LDR      r8,[r0,#8]            ;699  ; Correct_Strong
0000c2  eba10108          SUB      r1,r1,r8              ;699
0000c6  e002              B        |L2.206|
                  |L2.200|
0000c8  f8d08008          LDR      r8,[r0,#8]            ;701  ; Correct_Strong
0000cc  4441              ADD      r1,r1,r8              ;701
                  |L2.206|
0000ce  f8d28008          LDR      r8,[r2,#8]            ;702  ; Correct_Parametet
0000d2  fbb1f1f8          UDIV     r1,r1,r8              ;702
0000d6  0849              LSRS     r1,r1,#1              ;703
0000d8  073f              LSLS     r7,r7,#28             ;704
0000da  d401              BMI      |L2.224|
0000dc  f8ac1000          STRH     r1,[r12,#0]
                  |L2.224|
;;;707    		}
;;;708    		if(SET_Current_Laod==0)
0000e0  6921              LDR      r1,[r4,#0x10]  ; Run_Control
0000e2  bb21              CBNZ     r1,|L2.302|
;;;709    		{
;;;710    			Contr_Laod=0;
0000e4  f8ac6000          STRH     r6,[r12,#0]
0000e8  e021              B        |L2.302|
                  |L2.234|
;;;711    		}
;;;712    		var32 = 0;
;;;713    	}
;;;714    	else
;;;715    	{
;;;716    		var32 = SET_Voltage_Laod;
0000ea  68e1              LDR      r1,[r4,#0xc]  ; Run_Control
;;;717    		var32=var32<<12;   
0000ec  0309              LSLS     r1,r1,#12
;;;718    		if ((Polar2 & 0x04) == 0)			   
0000ee  f8938002          LDRB     r8,[r3,#2]  ; correct_por
0000f2  ea5f7848          LSLS     r8,r8,#29
0000f6  d40a              BMI      |L2.270|
;;;719    		{
;;;720    			if (var32 < SET_LoadA_Offset) var32 = 0;
0000f8  f8d08008          LDR      r8,[r0,#8]  ; Correct_Strong
0000fc  4588              CMP      r8,r1
0000fe  d901              BLS      |L2.260|
000100  2100              MOVS     r1,#0
000102  e007              B        |L2.276|
                  |L2.260|
;;;721    			else var32 = var32 - SET_LoadV_Offset;
000104  f8d08010          LDR      r8,[r0,#0x10]  ; Correct_Strong
000108  eba10108          SUB      r1,r1,r8
00010c  e002              B        |L2.276|
                  |L2.270|
;;;722    		}
;;;723    		else var32 = var32 + SET_LoadV_Offset;
00010e  f8d08010          LDR      r8,[r0,#0x10]  ; Correct_Strong
000112  4441              ADD      r1,r1,r8
                  |L2.276|
;;;724    		var32 = var32/SET_LoadV;
000114  f8d28010          LDR      r8,[r2,#0x10]  ; Correct_Parametet
000118  fbb1f1f8          UDIV     r1,r1,r8
;;;725    		var32=var32>>1;
00011c  0849              LSRS     r1,r1,#1
;;;726    		if(Flag_DAC_OFF==0)
00011e  073f              LSLS     r7,r7,#28
000120  d401              BMI      |L2.294|
;;;727    		{
;;;728    			Contr_Laod = var32;
000122  f8ac1000          STRH     r1,[r12,#0]
                  |L2.294|
;;;729    		}
;;;730    		if(SET_Voltage_Laod==0)
000126  68e1              LDR      r1,[r4,#0xc]  ; Run_Control
000128  b909              CBNZ     r1,|L2.302|
;;;731    		{
;;;732    			Contr_Laod=0;
00012a  f8ac6000          STRH     r6,[r12,#0]
                  |L2.302|
;;;733    		}
;;;734    		var32 = 0;
;;;735    	}
;;;736    /*****************************内阻值转换*******************************************/
;;;737    	var32 = Rmon_value;
00012e  4978              LDR      r1,|L2.784|
000130  880f              LDRH     r7,[r1,#0]  ; Rmon_value
;;;738        if(r_raly == 1)
000132  4978              LDR      r1,|L2.788|
000134  7809              LDRB     r1,[r1,#0]  ; r_raly
000136  2901              CMP      r1,#1
000138  d009              BEQ      |L2.334|
;;;739        {
;;;740            var32 = var32 * REG_CorrectionR;  
;;;741            if ((Polar3 & 0x01) == 0x01)		  
;;;742            {
;;;743                if (var32 < REG_ReadR_Offset) 
;;;744                {
;;;745                    var32 = 0;
;;;746                }
;;;747                else var32 = var32 - REG_ReadR_Offset;
;;;748            }
;;;749            else var32 = var32 + REG_ReadR_Offset;
;;;750            var32 = var32 >> 12;
;;;751            if (var32 < 1)
;;;752            {
;;;753                var32 = 0;				  //?￡
;;;754            }
;;;755            R_VLUE = var32;
;;;756            var32 = 0;
;;;757        }else{
;;;758            var32 = var32 * REG_CorrectionRL;  
00013a  6ad1              LDR      r1,[r2,#0x2c]  ; Correct_Parametet
00013c  4379              MULS     r1,r7,r1
;;;759            if ((Polar3 & 0x01) == 0x01)		  
00013e  78df              LDRB     r7,[r3,#3]  ; correct_por
000140  07ff              LSLS     r7,r7,#31
000142  d019              BEQ      |L2.376|
;;;760            {
;;;761                if (var32 < REG_ReadRL_Offset) 
000144  6ac7              LDR      r7,[r0,#0x2c]  ; Correct_Strong
000146  428f              CMP      r7,r1
000148  d913              BLS      |L2.370|
;;;762                {
;;;763                    var32 = 0;
00014a  2100              MOVS     r1,#0
00014c  e016              B        |L2.380|
                  |L2.334|
00014e  6951              LDR      r1,[r2,#0x14]         ;740  ; Correct_Parametet
000150  4379              MULS     r1,r7,r1              ;740
000152  78df              LDRB     r7,[r3,#3]            ;741  ; correct_por
000154  07ff              LSLS     r7,r7,#31             ;741
000156  d007              BEQ      |L2.360|
000158  6947              LDR      r7,[r0,#0x14]         ;743  ; Correct_Strong
00015a  428f              CMP      r7,r1                 ;743
00015c  d901              BLS      |L2.354|
00015e  2100              MOVS     r1,#0                 ;745
000160  e004              B        |L2.364|
                  |L2.354|
000162  6947              LDR      r7,[r0,#0x14]         ;747  ; Correct_Strong
000164  1bc9              SUBS     r1,r1,r7              ;747
000166  e001              B        |L2.364|
                  |L2.360|
000168  6947              LDR      r7,[r0,#0x14]         ;749  ; Correct_Strong
00016a  4439              ADD      r1,r1,r7              ;749
                  |L2.364|
00016c  0b09              LSRS     r1,r1,#12             ;750
00016e  6361              STR      r1,[r4,#0x34]         ;755  ; Run_Control
000170  e006              B        |L2.384|
                  |L2.370|
;;;764                }
;;;765                else var32 = var32 - REG_ReadRL_Offset;
000172  6ac7              LDR      r7,[r0,#0x2c]  ; Correct_Strong
000174  1bc9              SUBS     r1,r1,r7
000176  e001              B        |L2.380|
                  |L2.376|
;;;766            }
;;;767            else var32 = var32 + REG_ReadRL_Offset;
000178  6ac7              LDR      r7,[r0,#0x2c]  ; Correct_Strong
00017a  4439              ADD      r1,r1,r7
                  |L2.380|
;;;768            var32 = var32 >> 12;
00017c  0b09              LSRS     r1,r1,#12
;;;769            if (var32 < 1)
;;;770            {
;;;771                var32 = 0;				  //?￡
;;;772            }
;;;773            R_VLUE = var32;
00017e  6361              STR      r1,[r4,#0x34]  ; Run_Control
                  |L2.384|
;;;774            var32 = 0;
;;;775        }  	
;;;776    	/*****************************稳压电源测量电压转换*******************************************/
;;;777    	var32 = Vmon_value;
000180  4965              LDR      r1,|L2.792|
000182  880f              LDRH     r7,[r1,#0]  ; Vmon_value
;;;778    	var32 = var32 * REG_POWERV;  
000184  6a11              LDR      r1,[r2,#0x20]  ; Correct_Parametet
000186  4379              MULS     r1,r7,r1
;;;779    	if ((Polar5 & 0x01) == 0x01)		  
000188  795f              LDRB     r7,[r3,#5]  ; correct_por
00018a  07ff              LSLS     r7,r7,#31
00018c  d007              BEQ      |L2.414|
;;;780    	{
;;;781    		if (var32 < REG_POWERV_Offset) 
00018e  6a07              LDR      r7,[r0,#0x20]  ; Correct_Strong
000190  428f              CMP      r7,r1
000192  d901              BLS      |L2.408|
;;;782    		{
;;;783    			var32 = 0;
000194  2100              MOVS     r1,#0
000196  e004              B        |L2.418|
                  |L2.408|
;;;784    		}
;;;785    		else var32 = var32 - REG_POWERV_Offset;
000198  6a07              LDR      r7,[r0,#0x20]  ; Correct_Strong
00019a  1bc9              SUBS     r1,r1,r7
00019c  e001              B        |L2.418|
                  |L2.414|
;;;786    	}
;;;787    	else var32 = var32 + REG_POWERV_Offset;
00019e  6a07              LDR      r7,[r0,#0x20]  ; Correct_Strong
0001a0  4439              ADD      r1,r1,r7
                  |L2.418|
;;;788    	var32 = var32 >> 14;
0001a2  0b89              LSRS     r1,r1,#14
;;;789    	if (var32 < 40) var32 = 0;				  //40mV以下清零
0001a4  2928              CMP      r1,#0x28
0001a6  d200              BCS      |L2.426|
0001a8  2100              MOVS     r1,#0
                  |L2.426|
;;;790    	POW_Voltage = var32;
0001aa  6261              STR      r1,[r4,#0x24]  ; Run_Control
;;;791    	DISS_POW_Voltage=POW_Voltage;
0001ac  6a61              LDR      r1,[r4,#0x24]  ; Run_Control
0001ae  ee001a90          VMOV     s1,r1
0001b2  495a              LDR      r1,|L2.796|
0001b4  eef80a60          VCVT.F32.U32 s1,s1
;;;792    	DISS_POW_Voltage=DISS_POW_Voltage/100;//计算显示电压
0001b8  ed9f1a59          VLDR     s2,|L2.800|
0001bc  eec01a81          VDIV.F32 s3,s1,s2
0001c0  edc11a00          VSTR     s3,[r1,#0]
;;;793    	var32 = 0;
;;;794    /*****************************稳压电源测量电流转换*******************************************/
;;;795    	var32 = Imon_value;
0001c4  4957              LDR      r1,|L2.804|
0001c6  880f              LDRH     r7,[r1,#0]  ; Imon_value
;;;796    	if(flag_CC_MODE==1)
0001c8  4957              LDR      r1,|L2.808|
;;;797    	{
;;;798    		var32 = var32 * REG_POWERA;	   
;;;799    		if ((Polar4 & 0x01) == 0x01)			   
;;;800    		{
;;;801    			if (var32 < REG_POWERA_Offset) var32 = 0;
;;;802    			else var32 = var32 - REG_POWERA_Offset;
;;;803    		}
;;;804    		else
;;;805    		{
;;;806    			var32 = var32 + REG_POWERA_Offset;
;;;807    		}	
;;;808    		var32 = var32 >> 14;
;;;809    		Current = var32;;
;;;810    		DISS_POW_Current=Current;
0001ca  f8dfc160          LDR      r12,|L2.812|
0001ce  6809              LDR      r1,[r1,#0]            ;796  ; flagE
0001d0  0609              LSLS     r1,r1,#24             ;796
0001d2  d51a              BPL      |L2.522|
0001d4  6991              LDR      r1,[r2,#0x18]         ;798  ; Correct_Parametet
0001d6  4379              MULS     r1,r7,r1              ;798
0001d8  791f              LDRB     r7,[r3,#4]            ;799  ; correct_por
0001da  07ff              LSLS     r7,r7,#31             ;799
0001dc  d007              BEQ      |L2.494|
0001de  6987              LDR      r7,[r0,#0x18]         ;801  ; Correct_Strong
0001e0  428f              CMP      r7,r1                 ;801
0001e2  d901              BLS      |L2.488|
0001e4  2100              MOVS     r1,#0                 ;801
0001e6  e004              B        |L2.498|
                  |L2.488|
0001e8  6987              LDR      r7,[r0,#0x18]         ;802  ; Correct_Strong
0001ea  1bc9              SUBS     r1,r1,r7              ;802
0001ec  e001              B        |L2.498|
                  |L2.494|
0001ee  6987              LDR      r7,[r0,#0x18]         ;806  ; Correct_Strong
0001f0  4439              ADD      r1,r1,r7              ;806
                  |L2.498|
0001f2  0b89              LSRS     r1,r1,#14             ;808
0001f4  62e1              STR      r1,[r4,#0x2c]         ;809  ; Run_Control
0001f6  6ae1              LDR      r1,[r4,#0x2c]  ; Run_Control
0001f8  ee001a90          VMOV     s1,r1
0001fc  eef80a60          VCVT.F32.U32 s1,s1
;;;811    		DISS_POW_Current=DISS_POW_Current/1000;//计算显示电流
000200  ee801a80          VDIV.F32 s2,s1,s0
000204  ed8c1a00          VSTR     s2,[r12,#0]
000208  e019              B        |L2.574|
                  |L2.522|
;;;812    	}
;;;813    	else
;;;814    	{
;;;815    		var32 = var32 * CON_POWERA;	   
00020a  6a91              LDR      r1,[r2,#0x28]  ; Correct_Parametet
00020c  4379              MULS     r1,r7,r1
;;;816    		if ((Polar3 & 0x04) == 0x04)			   
00020e  78df              LDRB     r7,[r3,#3]  ; correct_por
000210  077f              LSLS     r7,r7,#29
000212  d507              BPL      |L2.548|
;;;817    		{
;;;818    			if (var32 < CON_POWERA_Offset) var32 = 0;
000214  6a87              LDR      r7,[r0,#0x28]  ; Correct_Strong
000216  428f              CMP      r7,r1
000218  d901              BLS      |L2.542|
00021a  2100              MOVS     r1,#0
00021c  e004              B        |L2.552|
                  |L2.542|
;;;819    			else var32 = var32 - CON_POWERA_Offset;
00021e  6a87              LDR      r7,[r0,#0x28]  ; Correct_Strong
000220  1bc9              SUBS     r1,r1,r7
000222  e001              B        |L2.552|
                  |L2.548|
;;;820    		}
;;;821    		else
;;;822    		{
;;;823    			var32 = var32 + CON_POWERA_Offset;
000224  6a87              LDR      r7,[r0,#0x28]  ; Correct_Strong
000226  4439              ADD      r1,r1,r7
                  |L2.552|
;;;824    		}	
;;;825    		var32 = var32 >> 14;
000228  0b89              LSRS     r1,r1,#14
;;;826    		Current = var32;;
00022a  62e1              STR      r1,[r4,#0x2c]  ; Run_Control
;;;827    		DISS_POW_Current=Current;
00022c  6ae1              LDR      r1,[r4,#0x2c]  ; Run_Control
00022e  ee001a90          VMOV     s1,r1
000232  eef80a60          VCVT.F32.U32 s1,s1
;;;828    		DISS_POW_Current=DISS_POW_Current/1000;//计算显示电流
000236  ee801a80          VDIV.F32 s2,s1,s0
00023a  ed8c1a00          VSTR     s2,[r12,#0]
                  |L2.574|
;;;829    	}
;;;830    /**************************稳压电源设置电压转换******************************************/
;;;831    	var32 = SET_Voltage;
00023e  6861              LDR      r1,[r4,#4]  ; Run_Control
;;;832    	var32=var32<<14;   
000240  0389              LSLS     r1,r1,#14
;;;833    	if ((Polar5 & 0x04) == 0)			   
000242  795f              LDRB     r7,[r3,#5]  ; correct_por
000244  077f              LSLS     r7,r7,#29
000246  d407              BMI      |L2.600|
;;;834    	{
;;;835    		if (var32 < SET_POWERV_Offset) var32 = 0;
000248  6a47              LDR      r7,[r0,#0x24]  ; Correct_Strong
00024a  428f              CMP      r7,r1
00024c  d901              BLS      |L2.594|
00024e  2100              MOVS     r1,#0
000250  e004              B        |L2.604|
                  |L2.594|
;;;836    		else var32 = var32 - SET_POWERV_Offset;
000252  6a47              LDR      r7,[r0,#0x24]  ; Correct_Strong
000254  1bc9              SUBS     r1,r1,r7
000256  e001              B        |L2.604|
                  |L2.600|
;;;837    	}
;;;838    	else var32 = var32 + SET_POWERV_Offset;
000258  6a47              LDR      r7,[r0,#0x24]  ; Correct_Strong
00025a  4439              ADD      r1,r1,r7
                  |L2.604|
;;;839    	var32 = var32/SET_POWERV;
00025c  6a57              LDR      r7,[r2,#0x24]  ; Correct_Parametet
00025e  fbb1f1f7          UDIV     r1,r1,r7
;;;840    	var32=var32>>1;
000262  0849              LSRS     r1,r1,#1
;;;841    	Contr_Voltage = var32;
000264  4f32              LDR      r7,|L2.816|
000266  8039              STRH     r1,[r7,#0]
;;;842    	if(SET_Voltage==0)
000268  6861              LDR      r1,[r4,#4]  ; Run_Control
00026a  b901              CBNZ     r1,|L2.622|
;;;843    	{
;;;844    		Contr_Voltage=0;
00026c  803e              STRH     r6,[r7,#0]
                  |L2.622|
;;;845    	}
;;;846    	var32 = 0;
;;;847    /**************************稳压电源设置电流转换**************************************/
;;;848    	var32 = SET_Current;
00026e  68a1              LDR      r1,[r4,#8]  ; Run_Control
;;;849    	var32=var32<<14;   
000270  0389              LSLS     r1,r1,#14
;;;850    	if ((Polar4 & 0x04) == 0)			   
000272  791f              LDRB     r7,[r3,#4]  ; correct_por
000274  077f              LSLS     r7,r7,#29
000276  d407              BMI      |L2.648|
;;;851    	{
;;;852    		if (var32 < SET_POWERA_Offset) var32 = 0;
000278  69c7              LDR      r7,[r0,#0x1c]  ; Correct_Strong
00027a  428f              CMP      r7,r1
00027c  d901              BLS      |L2.642|
00027e  2000              MOVS     r0,#0
000280  e004              B        |L2.652|
                  |L2.642|
;;;853    		else var32 = var32 - SET_POWERA_Offset;
000282  69c0              LDR      r0,[r0,#0x1c]  ; Correct_Strong
000284  1a08              SUBS     r0,r1,r0
000286  e001              B        |L2.652|
                  |L2.648|
;;;854    	}
;;;855    	else var32 = var32 + SET_POWERA_Offset;
000288  69c0              LDR      r0,[r0,#0x1c]  ; Correct_Strong
00028a  4408              ADD      r0,r0,r1
                  |L2.652|
;;;856    	var32 = var32/SET_POWERA;
00028c  69d1              LDR      r1,[r2,#0x1c]  ; Correct_Parametet
00028e  fbb0f0f1          UDIV     r0,r0,r1
;;;857    	var32=var32>>1;
000292  0840              LSRS     r0,r0,#1
;;;858    	Contr_Current = var32;
000294  4927              LDR      r1,|L2.820|
000296  8008              STRH     r0,[r1,#0]
;;;859    	if(SET_Current==0)
000298  68a0              LDR      r0,[r4,#8]  ; Run_Control
00029a  b900              CBNZ     r0,|L2.670|
;;;860    	{
;;;861    		Contr_Current=0;
00029c  800e              STRH     r6,[r1,#0]
                  |L2.670|
;;;862    	}
;;;863    	
;;;864    	var32 = 0;
;;;865    /*******************测量漏电流转换**************************************/
;;;866    	var32 = LowImon_value;
00029e  4826              LDR      r0,|L2.824|
0002a0  8801              LDRH     r1,[r0,#0]  ; LowImon_value
;;;867    	var32 = var32 * REG_LEAKI;  
0002a2  6b10              LDR      r0,[r2,#0x30]  ; Correct_Parametet
0002a4  4348              MULS     r0,r1,r0
;;;868    	if ((Polar1 & 0x01) == 0x01)		  
0002a6  7859              LDRB     r1,[r3,#1]  ; correct_por
0002a8  07c9              LSLS     r1,r1,#31
0002aa  d007              BEQ      |L2.700|
;;;869    	{
;;;870    		if (var32 < REG_LEAKI_Offset) 
0002ac  6b11              LDR      r1,[r2,#0x30]  ; Correct_Parametet
0002ae  4281              CMP      r1,r0
0002b0  d901              BLS      |L2.694|
;;;871    		{
;;;872    			var32 = 0;
0002b2  2000              MOVS     r0,#0
0002b4  e004              B        |L2.704|
                  |L2.694|
;;;873    		}
;;;874    		else var32 = var32 - REG_LEAKI_Offset;
0002b6  6b11              LDR      r1,[r2,#0x30]  ; Correct_Parametet
0002b8  1a40              SUBS     r0,r0,r1
0002ba  e001              B        |L2.704|
                  |L2.700|
;;;875    	}
;;;876    	else var32 = var32 + REG_LEAKI_Offset;
0002bc  6b11              LDR      r1,[r2,#0x30]  ; Correct_Parametet
0002be  4408              ADD      r0,r0,r1
                  |L2.704|
;;;877    	var32 = var32 >> 12;
0002c0  0b00              LSRS     r0,r0,#12
;;;878    	Leak_I = var32;
0002c2  f8440fa4          STR      r0,[r4,#0xa4]!  ; Run_Control
;;;879    	DISS_Current=Leak_I;
0002c6  6820              LDR      r0,[r4,#0]  ; Run_Control
0002c8  ee000a90          VMOV     s1,r0
0002cc  eef80a60          VCVT.F32.U32 s1,s1
0002d0  edc50a00          VSTR     s1,[r5,#0]
;;;880    	DISS_Leak_Current=DISS_Leak_Current/1000;//计算显示电流
0002d4  4819              LDR      r0,|L2.828|
0002d6  edd00a00          VLDR     s1,[r0,#0]
0002da  ee801a80          VDIV.F32 s2,s1,s0
0002de  ed801a00          VSTR     s2,[r0,#0]
;;;881    	var32 = 0;	
;;;882    }
0002e2  e8bd81f0          POP      {r4-r8,pc}
;;;883    /********************************************************************************
                          ENDP

0002e6  0000              DCW      0x0000
                  |L2.744|
                          DCD      Vmon1_value
                  |L2.748|
                          DCD      ||.bss||
                  |L2.752|
                          DCD      ||area_number.8||+0x1c
                  |L2.756|
                          DCD      DISS_Voltage
                  |L2.760|
0002f8  447a0000          DCFS     0x447a0000 ; 1000
                  |L2.764|
                          DCD      Imon1_value
                  |L2.768|
                          DCD      DISS_Current
                  |L2.772|
                          DCD      flagD
                  |L2.776|
                          DCD      flagB
                  |L2.780|
                          DCD      Contr_Laod
                  |L2.784|
                          DCD      Rmon_value
                  |L2.788|
                          DCD      r_raly
                  |L2.792|
                          DCD      Vmon_value
                  |L2.796|
                          DCD      DISS_POW_Voltage
                  |L2.800|
000320  42c80000          DCFS     0x42c80000 ; 100
                  |L2.804|
                          DCD      Imon_value
                  |L2.808|
                          DCD      flagE
                  |L2.812|
                          DCD      DISS_POW_Current
                  |L2.816|
                          DCD      Contr_Voltage
                  |L2.820|
                          DCD      Contr_Current
                  |L2.824|
                          DCD      LowImon_value
                  |L2.828|
                          DCD      DISS_Leak_Current

                          AREA ||i.UART_Action||, CODE, READONLY, ALIGN=2

                  UART_Action PROC
;;;44     //===========================MODBUS协议=============================//
;;;45     void UART_Action(void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;46     {//RUT??ú
;;;47     	//ADDR  ???  ??????????   ??????????  ?????????   ????????  CRC? CRC?
;;;48     	//????úADDR ??? ???????  ???  ??? ..... CRC?  CRC?
;;;49     	if (UART_Buffer_Rece[0] == ADDR)
000004  f8dfa3f8          LDR      r10,|L3.1024|
000008  f89a0000          LDRB     r0,[r10,#0]  ; UART_Buffer_Rece
00000c  4efd              LDR      r6,|L3.1028|
00000e  7871              LDRB     r1,[r6,#1]  ; ADDR
;;;50     	{
;;;51     		if (UART_Buffer_Rece[1] == (0x03))	//??3 ???   
;;;52     		{																		 
;;;53     			vu8 i;
;;;54     			vu16 crc_result;
;;;55     			crc_result = (UART_Buffer_Rece[6] << 8) + UART_Buffer_Rece[7];
;;;56     			if ((crc_result == Hardware_CRC(UART_Buffer_Rece,6)) ||(crc_result == 0) )
;;;57     			{
;;;58     				if (UART_Buffer_Rece[3] < 0x07)    								//?????????Χ?
;;;59     				{
;;;60     					if ((UART_Buffer_Rece[3] + UART_Buffer_Rece[5]) < 0x0F)		//??????????????????Χ?
;;;61     					{							
;;;62     						UART_Buffer_Send[0] = ADDR;
000010  4dfd              LDR      r5,|L3.1032|
;;;63     						UART_Buffer_Send[1] = 0x03;
;;;64     						UART_Buffer_Send[2] = UART_Buffer_Rece[5]*2;
;;;65     						for (i=0;i<UART_Buffer_Send[2];i++)
;;;66     						{
;;;67     							if ((i % 2) == 0) UART_Buffer_Send[3 + i] = Run_Control[UART_Buffer_Rece[3] + i / 2] >> 8;
;;;68     							else UART_Buffer_Send[3 + i] = Run_Control[UART_Buffer_Rece[3] + i / 2];														
;;;69     						}
;;;70     						crc_result = Hardware_CRC(UART_Buffer_Send,UART_Buffer_Send[2] + 3);
;;;71     						UART_Buffer_Send[3 + UART_Buffer_Send[2]] = crc_result >> 8;
;;;72     						UART_Buffer_Send[4 + UART_Buffer_Send[2]] = crc_result;
;;;73     						Transmit_BUFFERsize = UART_Buffer_Send[2] + 5;
000012  f8df93f8          LDR      r9,|L3.1036|
;;;74     						UART_SEND_flag=1;
000016  4ffe              LDR      r7,|L3.1040|
000018  f8df83f8          LDR      r8,|L3.1044|
00001c  4288              CMP      r0,r1                 ;49
00001e  d14b              BNE      |L3.184|
000020  f89a0001          LDRB     r0,[r10,#1]           ;51  ; UART_Buffer_Rece
000024  2803              CMP      r0,#3                 ;51
000026  d147              BNE      |L3.184|
000028  f89a0007          LDRB     r0,[r10,#7]           ;55  ; UART_Buffer_Rece
00002c  f89a1006          LDRB     r1,[r10,#6]           ;55  ; UART_Buffer_Rece
000030  eb002001          ADD      r0,r0,r1,LSL #8       ;55
000034  b284              UXTH     r4,r0                 ;55
000036  2106              MOVS     r1,#6                 ;56
000038  4650              MOV      r0,r10                ;56
00003a  f7fffffe          BL       Hardware_CRC
00003e  42a0              CMP      r0,r4                 ;56
000040  d000              BEQ      |L3.68|
000042  bbcc              CBNZ     r4,|L3.184|
                  |L3.68|
000044  f89a0003          LDRB     r0,[r10,#3]           ;58  ; UART_Buffer_Rece
000048  2807              CMP      r0,#7                 ;58
00004a  d235              BCS      |L3.184|
00004c  f89a0003          LDRB     r0,[r10,#3]           ;60  ; UART_Buffer_Rece
000050  f89a1005          LDRB     r1,[r10,#5]           ;60  ; UART_Buffer_Rece
000054  4408              ADD      r0,r0,r1              ;60
000056  280f              CMP      r0,#0xf               ;60
000058  d22e              BCS      |L3.184|
00005a  7870              LDRB     r0,[r6,#1]            ;62  ; ADDR
00005c  7028              STRB     r0,[r5,#0]            ;62
00005e  2003              MOVS     r0,#3                 ;63
000060  7068              STRB     r0,[r5,#1]            ;63
000062  f89a0005          LDRB     r0,[r10,#5]           ;64  ; UART_Buffer_Rece
000066  0040              LSLS     r0,r0,#1              ;64
000068  70a8              STRB     r0,[r5,#2]            ;64
00006a  2000              MOVS     r0,#0                 ;65
00006c  e00b              B        |L3.134|
                  |L3.110|
00006e  07c1              LSLS     r1,r0,#31             ;67
000070  d03d              BEQ      |L3.238|
000072  f89a1003          LDRB     r1,[r10,#3]           ;68  ; UART_Buffer_Rece
000076  eb010150          ADD      r1,r1,r0,LSR #1       ;68
00007a  f8581021          LDR      r1,[r8,r1,LSL #2]     ;68
00007e  182a              ADDS     r2,r5,r0              ;68
000080  70d1              STRB     r1,[r2,#3]            ;68
                  |L3.130|
000082  1c40              ADDS     r0,r0,#1              ;65
000084  b2c0              UXTB     r0,r0                 ;65
                  |L3.134|
000086  78a9              LDRB     r1,[r5,#2]            ;65  ; UART_Buffer_Send
000088  4281              CMP      r1,r0                 ;65
00008a  d8f0              BHI      |L3.110|
00008c  78a8              LDRB     r0,[r5,#2]            ;70  ; UART_Buffer_Send
00008e  1cc0              ADDS     r0,r0,#3              ;70
000090  b2c1              UXTB     r1,r0                 ;70
000092  48dd              LDR      r0,|L3.1032|
000094  f7fffffe          BL       Hardware_CRC
000098  78ab              LDRB     r3,[r5,#2]            ;71  ; UART_Buffer_Send
00009a  0a02              LSRS     r2,r0,#8              ;71
00009c  49da              LDR      r1,|L3.1032|
00009e  1cc9              ADDS     r1,r1,#3              ;71
0000a0  545a              STRB     r2,[r3,r1]            ;71
0000a2  78aa              LDRB     r2,[r5,#2]            ;72  ; UART_Buffer_Send
0000a4  1c49              ADDS     r1,r1,#1              ;72
0000a6  5450              STRB     r0,[r2,r1]            ;72
0000a8  78a8              LDRB     r0,[r5,#2]            ;73  ; UART_Buffer_Send
0000aa  1d40              ADDS     r0,r0,#5              ;73
0000ac  f8890000          STRB     r0,[r9,#0]            ;73
0000b0  6838              LDR      r0,[r7,#0]  ; flagA
0000b2  f0400010          ORR      r0,r0,#0x10
0000b6  6038              STR      r0,[r7,#0]  ; flagA
                  |L3.184|
;;;75     					}
;;;76     				}
;;;77     			}	
;;;78     		}
;;;79     	} 
;;;80     //===============================д???=================================
;;;81     	if ((UART_Buffer_Rece[0] == 0) || (UART_Buffer_Rece[0] == ADDR) || (UART_Buffer_Rece[0] == ((ADDR-1)/4+100)))	 
0000b8  f89a0000          LDRB     r0,[r10,#0]  ; UART_Buffer_Rece
0000bc  b180              CBZ      r0,|L3.224|
0000be  f89a0000          LDRB     r0,[r10,#0]  ; UART_Buffer_Rece
0000c2  7871              LDRB     r1,[r6,#1]  ; ADDR
0000c4  4288              CMP      r0,r1
0000c6  d00b              BEQ      |L3.224|
0000c8  7870              LDRB     r0,[r6,#1]  ; ADDR
0000ca  1e40              SUBS     r0,r0,#1
0000cc  17c1              ASRS     r1,r0,#31
0000ce  eb007091          ADD      r0,r0,r1,LSR #30
0000d2  2164              MOVS     r1,#0x64
0000d4  eb0100a0          ADD      r0,r1,r0,ASR #2
0000d8  f89a1000          LDRB     r1,[r10,#0]  ; UART_Buffer_Rece
0000dc  4288              CMP      r0,r1
0000de  d17d              BNE      |L3.476|
                  |L3.224|
;;;82     	{
;;;83     		vu8 var8;
;;;84     		vu8 a=0;
;;;85     		vu16 var16;
;;;86     		vu16 crc_result;
;;;87     //=========================????6 д?????===========================
;;;88     		if (UART_Buffer_Rece[1] == 6)                                 //???????ˇ????6
0000e0  f89a0001          LDRB     r0,[r10,#1]  ; UART_Buffer_Rece
;;;89     		{
;;;90     			if (UART_Buffer_Rece[3] < 0x05)							  //????д???ˇ???д?Χ?
;;;91     			{
;;;92     				crc_result = (UART_Buffer_Rece[6] << 8) + UART_Buffer_Rece[7];
;;;93     				if ((crc_result == Hardware_CRC(UART_Buffer_Rece,6)) ||(crc_result == 0) )		  //??CRC
;;;94     				{
;;;95     					var16 = (UART_Buffer_Rece[4] << 8) + UART_Buffer_Rece[5];	//?5 6?????д????
;;;96     					var8 = UART_Buffer_Rece[3];	        						//?3 4?????д????
;;;97     					Run_Control[var8] = var16;			    //???д??????
;;;98     
;;;99     					if (UART_Buffer_Rece[0] == ADDR)							//??????????
;;;100    					{
;;;101    						for (a=0;a<8;a++)
;;;102    						{UART_Buffer_Send[a] = UART_Buffer_Rece[a];}
;;;103    						Transmit_BUFFERsize = 8;						//??????ì???CRC
0000e4  f04f0b08          MOV      r11,#8
0000e8  2806              CMP      r0,#6                 ;88
0000ea  d00a              BEQ      |L3.258|
0000ec  e03a              B        |L3.356|
                  |L3.238|
0000ee  f89a1003          LDRB     r1,[r10,#3]           ;67  ; UART_Buffer_Rece
0000f2  eb010150          ADD      r1,r1,r0,LSR #1       ;67
0000f6  f8581021          LDR      r1,[r8,r1,LSL #2]     ;67
0000fa  0a09              LSRS     r1,r1,#8              ;67
0000fc  182a              ADDS     r2,r5,r0              ;67
0000fe  70d1              STRB     r1,[r2,#3]            ;67
000100  e7bf              B        |L3.130|
                  |L3.258|
000102  f89a0003          LDRB     r0,[r10,#3]           ;90  ; UART_Buffer_Rece
000106  2805              CMP      r0,#5                 ;90
000108  d22c              BCS      |L3.356|
00010a  f89a0007          LDRB     r0,[r10,#7]           ;92  ; UART_Buffer_Rece
00010e  f89a1006          LDRB     r1,[r10,#6]           ;92  ; UART_Buffer_Rece
000112  eb002001          ADD      r0,r0,r1,LSL #8       ;92
000116  b284              UXTH     r4,r0                 ;92
000118  2106              MOVS     r1,#6                 ;93
00011a  48b9              LDR      r0,|L3.1024|
00011c  f7fffffe          BL       Hardware_CRC
000120  42a0              CMP      r0,r4                 ;93
000122  d000              BEQ      |L3.294|
000124  b9f4              CBNZ     r4,|L3.356|
                  |L3.294|
000126  f89a0005          LDRB     r0,[r10,#5]           ;95  ; UART_Buffer_Rece
00012a  f89a1004          LDRB     r1,[r10,#4]           ;95  ; UART_Buffer_Rece
00012e  eb002001          ADD      r0,r0,r1,LSL #8       ;95
000132  b280              UXTH     r0,r0                 ;95
000134  f89a1003          LDRB     r1,[r10,#3]           ;96  ; UART_Buffer_Rece
000138  f8480021          STR      r0,[r8,r1,LSL #2]     ;97
00013c  f89a0000          LDRB     r0,[r10,#0]           ;99  ; UART_Buffer_Rece
000140  7871              LDRB     r1,[r6,#1]            ;99  ; ADDR
000142  4288              CMP      r0,r1                 ;99
000144  d10e              BNE      |L3.356|
000146  2000              MOVS     r0,#0                 ;101
000148  e004              B        |L3.340|
                  |L3.330|
00014a  f81a1000          LDRB     r1,[r10,r0]           ;102
00014e  5429              STRB     r1,[r5,r0]            ;102
000150  1c40              ADDS     r0,r0,#1              ;101
000152  b2c0              UXTB     r0,r0                 ;101
                  |L3.340|
000154  2808              CMP      r0,#8                 ;101
000156  d3f8              BCC      |L3.330|
000158  f889b000          STRB     r11,[r9,#0]
;;;104    						UART_SEND_flag=1;
00015c  6838              LDR      r0,[r7,#0]  ; flagA
00015e  f0400010          ORR      r0,r0,#0x10
000162  6038              STR      r0,[r7,#0]  ; flagA
                  |L3.356|
;;;105    					}
;;;106    				}
;;;107    			}
;;;108    		}
;;;109    //=======================================??ˇ??16ìlд???===========================================
;;;110    //???16??:
;;;111    //     ?? ?? д??????  д?????? д????  д???? д????  ??? ??? ......CRC? CRC?
;;;112    //??????:
;;;113    //     ?? ?? д??????  д??????  д????? д?????  CRC?  CRC? 
;;;114    		if (UART_Buffer_Rece[1] == 16)										  
000164  f89a0001          LDRB     r0,[r10,#1]  ; UART_Buffer_Rece
000168  2810              CMP      r0,#0x10
00016a  d146              BNE      |L3.506|
;;;115    		{	
;;;116    			if ((UART_Buffer_Rece[6] == 6) && (UART_Buffer_Rece[3] == 0x00))	//??lд??????
00016c  f89a0006          LDRB     r0,[r10,#6]  ; UART_Buffer_Rece
000170  2806              CMP      r0,#6
000172  d142              BNE      |L3.506|
000174  f89a0003          LDRB     r0,[r10,#3]  ; UART_Buffer_Rece
000178  bb80              CBNZ     r0,|L3.476|
;;;117    			{
;;;118    				crc_result = (UART_Buffer_Rece[13] << 8) + UART_Buffer_Rece[14];
00017a  f89a000e          LDRB     r0,[r10,#0xe]  ; UART_Buffer_Rece
00017e  f89a100d          LDRB     r1,[r10,#0xd]  ; UART_Buffer_Rece
000182  eb002001          ADD      r0,r0,r1,LSL #8
000186  b284              UXTH     r4,r0
;;;119    				if ((crc_result == Hardware_CRC(UART_Buffer_Rece,13)) ||(crc_result == 0) )	   //??CRC
000188  210d              MOVS     r1,#0xd
00018a  489d              LDR      r0,|L3.1024|
00018c  f7fffffe          BL       Hardware_CRC
000190  42a0              CMP      r0,r4
000192  d000              BEQ      |L3.406|
000194  bb14              CBNZ     r4,|L3.476|
                  |L3.406|
;;;120    				{												
;;;121    					for (var8=0;var8<3;var8++) Run_Control[var8] = (UART_Buffer_Rece[var8*2+7] << 8) + UART_Buffer_Rece[var8*2+8];
000196  2000              MOVS     r0,#0
000198  e009              B        |L3.430|
                  |L3.410|
00019a  eb0a0140          ADD      r1,r10,r0,LSL #1
00019e  7a0a              LDRB     r2,[r1,#8]
0001a0  79c9              LDRB     r1,[r1,#7]
0001a2  eb022101          ADD      r1,r2,r1,LSL #8
0001a6  f8481020          STR      r1,[r8,r0,LSL #2]
0001aa  1c40              ADDS     r0,r0,#1
0001ac  b2c0              UXTB     r0,r0
                  |L3.430|
0001ae  2803              CMP      r0,#3
0001b0  d3f3              BCC      |L3.410|
;;;122    
;;;123    					if (UART_Buffer_Rece[0] == ADDR)					  //?????????
0001b2  f89a0000          LDRB     r0,[r10,#0]  ; UART_Buffer_Rece
0001b6  7871              LDRB     r1,[r6,#1]  ; ADDR
0001b8  4288              CMP      r0,r1
0001ba  d11e              BNE      |L3.506|
;;;124    					{
;;;125    						UART_Buffer_Send[0] = ADDR;
0001bc  7870              LDRB     r0,[r6,#1]  ; ADDR
0001be  7028              STRB     r0,[r5,#0]
;;;126    						UART_Buffer_Send[1] = 16;
0001c0  2010              MOVS     r0,#0x10
0001c2  7068              STRB     r0,[r5,#1]
;;;127    						UART_Buffer_Send[2] = UART_Buffer_Rece[2];
0001c4  f89a0002          LDRB     r0,[r10,#2]  ; UART_Buffer_Rece
0001c8  70a8              STRB     r0,[r5,#2]
;;;128    						UART_Buffer_Send[3] = UART_Buffer_Rece[3];
0001ca  f89a0003          LDRB     r0,[r10,#3]  ; UART_Buffer_Rece
0001ce  70e8              STRB     r0,[r5,#3]
;;;129    						UART_Buffer_Send[4] = UART_Buffer_Rece[4];
0001d0  f89a0004          LDRB     r0,[r10,#4]  ; UART_Buffer_Rece
0001d4  7128              STRB     r0,[r5,#4]
;;;130    						UART_Buffer_Send[5] = UART_Buffer_Rece[5];
0001d6  f89a0005          LDRB     r0,[r10,#5]  ; UART_Buffer_Rece
0001da  e000              B        |L3.478|
                  |L3.476|
0001dc  e00d              B        |L3.506|
                  |L3.478|
0001de  7168              STRB     r0,[r5,#5]
;;;131    						crc_result = Hardware_CRC(UART_Buffer_Send,6);	 //??CRC?
0001e0  2106              MOVS     r1,#6
0001e2  4889              LDR      r0,|L3.1032|
0001e4  f7fffffe          BL       Hardware_CRC
;;;132    						UART_Buffer_Send[6] = crc_result>>8;
0001e8  0a01              LSRS     r1,r0,#8
0001ea  71a9              STRB     r1,[r5,#6]
;;;133    						UART_Buffer_Send[7] = crc_result;				 
0001ec  71e8              STRB     r0,[r5,#7]
;;;134    						Transmit_BUFFERsize = 8;					     //?????????
0001ee  f889b000          STRB     r11,[r9,#0]
;;;135    						UART_SEND_flag=1;
0001f2  6838              LDR      r0,[r7,#0]  ; flagA
0001f4  f0400010          ORR      r0,r0,#0x10
0001f8  6038              STR      r0,[r7,#0]  ; flagA
                  |L3.506|
;;;136    					}
;;;137    				}
;;;138    			}			 
;;;139    		}
;;;140    	}
;;;141    /*************************************???У???**************************************************************************/
;;;142    	if (((UART_Buffer_Rece[0] == 0x01)&&(UART_Buffer_Rece[2] == 0xA5))||(flag_ADJ_ON==1))			   //??У?
0001fa  f89a0000          LDRB     r0,[r10,#0]  ; UART_Buffer_Rece
0001fe  f8df9218          LDR      r9,|L3.1048|
000202  2801              CMP      r0,#1
000204  d103              BNE      |L3.526|
000206  f89a0002          LDRB     r0,[r10,#2]  ; UART_Buffer_Rece
00020a  28a5              CMP      r0,#0xa5
00020c  d003              BEQ      |L3.534|
                  |L3.526|
00020e  f8d90000          LDR      r0,[r9,#0]  ; flagF
000212  0780              LSLS     r0,r0,#30
000214  d57d              BPL      |L3.786|
                  |L3.534|
;;;143    	{ 
;;;144    		if(UART_Buffer_Rece[1] == 0x01)
000216  f89a0001          LDRB     r0,[r10,#1]  ; UART_Buffer_Rece
;;;145    		{
;;;146    			flag_ADJ_VL=0;
;;;147    			Modify_A_READ = Vmon1_value;//????
00021a  f8dfb200          LDR      r11,|L3.1052|
00021e  2801              CMP      r0,#1                 ;144
000220  d10f              BNE      |L3.578|
000222  f8d90000          LDR      r0,[r9,#0]            ;146  ; flagF
000226  f0200004          BIC      r0,r0,#4              ;146
00022a  f8c90000          STR      r0,[r9,#0]            ;146  ; flagF
00022e  f8db0000          LDR      r0,[r11,#0]  ; Vmon1_value
000232  6070              STR      r0,[r6,#4]  ; Modify_A_READ
;;;148    			Modify_A_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];//????
000234  f89a0004          LDRB     r0,[r10,#4]  ; UART_Buffer_Rece
000238  f89a1003          LDRB     r1,[r10,#3]  ; UART_Buffer_Rece
00023c  eb002001          ADD      r0,r0,r1,LSL #8
000240  60f0              STR      r0,[r6,#0xc]  ; Modify_A_ACT
                  |L3.578|
;;;149    		}
;;;150    		if (UART_Buffer_Rece[1] == 0x02)			   //???У???
000242  f89a0001          LDRB     r0,[r10,#1]  ; UART_Buffer_Rece
;;;151    		{
;;;152    			vu32 var16;
;;;153    			vu32 var32a;
;;;154    			vu32 var32b;
;;;155    			
;;;156    			vu32 var16a;
;;;157    			vu32 var32c;
;;;158    			vu32 var32d;
;;;159    			Modify_B_READ =Vmon1_value;//????
;;;160    			Modify_B_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];//????
;;;161    			var32a = Modify_B_ACT;
;;;162    			var32a = var32a - Modify_A_ACT;
;;;163    			var32a = var32a << 12;
;;;164    			var16 = Modify_B_READ - Modify_A_READ;
;;;165    			var32a = var32a / var16;
;;;166    			REG_CorrectionV = var32a;
;;;167    			var32a=0;
;;;168    			var32a = Modify_B_ACT;
;;;169    			var32a = var32a << 12;
;;;170    			var32b = Modify_B_READ;
;;;171    			var32b = var32b * REG_CorrectionV;
;;;172    			if (var32a < var32b)
;;;173    			{
;;;174    				var32b = var32b - var32a;
;;;175    				REG_ReadV_Offset = var32b;
000246  4d73              LDR      r5,|L3.1044|
;;;176    				Polar |= 0x01;
000248  4c6e              LDR      r4,|L3.1028|
00024a  3d34              SUBS     r5,r5,#0x34           ;175
00024c  341c              ADDS     r4,r4,#0x1c
;;;177    			}
;;;178    			else 
;;;179    			{
;;;180    				var32a = var32a - var32b;
;;;181    				REG_ReadV_Offset = var32a;
;;;182    				Polar &= ~0x01;
;;;183    			}			
;;;184    			Flash_Write_all();	//??д?FLASH
;;;185    			Flag_DAC_OFF=0;
00024e  4f74              LDR      r7,|L3.1056|
000250  f1a50834          SUB      r8,r5,#0x34           ;166
000254  2802              CMP      r0,#2                 ;150
000256  d12f              BNE      |L3.696|
000258  f8db0000          LDR      r0,[r11,#0]           ;159  ; Vmon1_value
00025c  6130              STR      r0,[r6,#0x10]         ;159  ; Modify_B_READ
00025e  f89a0004          LDRB     r0,[r10,#4]           ;160  ; UART_Buffer_Rece
000262  f89a1003          LDRB     r1,[r10,#3]           ;160  ; UART_Buffer_Rece
000266  eb002001          ADD      r0,r0,r1,LSL #8       ;160
00026a  61b0              STR      r0,[r6,#0x18]         ;160  ; Modify_B_ACT
00026c  69b0              LDR      r0,[r6,#0x18]         ;161  ; Modify_B_ACT
00026e  68f1              LDR      r1,[r6,#0xc]          ;162  ; Modify_A_ACT
000270  1a40              SUBS     r0,r0,r1              ;162
000272  0301              LSLS     r1,r0,#12             ;163
000274  6930              LDR      r0,[r6,#0x10]         ;164  ; Modify_B_READ
000276  6872              LDR      r2,[r6,#4]            ;164  ; Modify_A_READ
000278  1a80              SUBS     r0,r0,r2              ;164
00027a  fbb1f0f0          UDIV     r0,r1,r0              ;165
00027e  f8c80000          STR      r0,[r8,#0]            ;166  ; Correct_Parametet
000282  69b0              LDR      r0,[r6,#0x18]         ;168  ; Modify_B_ACT
000284  0301              LSLS     r1,r0,#12             ;169
000286  6932              LDR      r2,[r6,#0x10]         ;170  ; Modify_B_READ
000288  f8d80000          LDR      r0,[r8,#0]            ;171  ; Correct_Parametet
00028c  4350              MULS     r0,r2,r0              ;171
00028e  4281              CMP      r1,r0                 ;172
000290  d206              BCS      |L3.672|
000292  1a40              SUBS     r0,r0,r1              ;174
000294  6028              STR      r0,[r5,#0]            ;175  ; Correct_Strong
000296  7820              LDRB     r0,[r4,#0]            ;176  ; correct_por
000298  f0400001          ORR      r0,r0,#1              ;176
00029c  7020              STRB     r0,[r4,#0]            ;176
00029e  e005              B        |L3.684|
                  |L3.672|
0002a0  1a08              SUBS     r0,r1,r0              ;180
0002a2  6028              STR      r0,[r5,#0]            ;181  ; Correct_Strong
0002a4  7820              LDRB     r0,[r4,#0]            ;182  ; correct_por
0002a6  f0200001          BIC      r0,r0,#1              ;182
0002aa  7020              STRB     r0,[r4,#0]            ;182
                  |L3.684|
0002ac  f7fffffe          BL       Flash_Write_all
0002b0  6838              LDR      r0,[r7,#0]  ; flagB
0002b2  f0200008          BIC      r0,r0,#8
0002b6  6038              STR      r0,[r7,#0]  ; flagB
                  |L3.696|
;;;186    		}
;;;187    		
;;;188    		
;;;189    /************************************???・????У?*****************************************************************/
;;;190    		if (UART_Buffer_Rece[1] == 0x03)			   //CC??У?
0002b8  f89a2001          LDRB     r2,[r10,#1]  ; UART_Buffer_Rece
0002bc  4650              MOV      r0,r10
;;;191    		{
;;;192    			Modify_A_READ = Imon1_value;//
0002be  4959              LDR      r1,|L3.1060|
;;;193    			Modify_C_READ = Contr_Laod;//
0002c0  f8dfa164          LDR      r10,|L3.1064|
0002c4  2a03              CMP      r2,#3                 ;190
0002c6  d10d              BNE      |L3.740|
0002c8  680a              LDR      r2,[r1,#0]            ;192  ; Imon1_value
0002ca  6072              STR      r2,[r6,#4]            ;192  ; Modify_A_READ
0002cc  f8ba2000          LDRH     r2,[r10,#0]  ; Contr_Laod
0002d0  60b2              STR      r2,[r6,#8]  ; Modify_C_READ
;;;194    			Modify_A_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
0002d2  7902              LDRB     r2,[r0,#4]  ; UART_Buffer_Rece
0002d4  78c3              LDRB     r3,[r0,#3]  ; UART_Buffer_Rece
0002d6  eb022203          ADD      r2,r2,r3,LSL #8
0002da  60f2              STR      r2,[r6,#0xc]  ; Modify_A_ACT
;;;195    			Flag_DAC_OFF=1;//
0002dc  683a              LDR      r2,[r7,#0]  ; flagB
0002de  f0420208          ORR      r2,r2,#8
0002e2  603a              STR      r2,[r7,#0]  ; flagB
                  |L3.740|
;;;196    		}
;;;197    
;;;198    		if (UART_Buffer_Rece[1] == 0x04)			   //
0002e4  4846              LDR      r0,|L3.1024|
0002e6  7840              LDRB     r0,[r0,#1]  ; UART_Buffer_Rece
0002e8  2804              CMP      r0,#4
0002ea  d154              BNE      |L3.918|
;;;199    		{
;;;200    			vu32 var16;
;;;201    			vu32 var32a;
;;;202    			vu32 var32b;
;;;203    			
;;;204    			vu32 var16a;
;;;205    			vu32 var32c;
;;;206    			vu32 var32d;
;;;207    			
;;;208    			Modify_B_READ = Imon1_value;
0002ec  6808              LDR      r0,[r1,#0]  ; Imon1_value
0002ee  6130              STR      r0,[r6,#0x10]  ; Modify_B_READ
;;;209    			Modify_D_READ = Contr_Laod;
0002f0  f8ba0000          LDRH     r0,[r10,#0]  ; Contr_Laod
0002f4  6170              STR      r0,[r6,#0x14]  ; Modify_D_READ
;;;210    			Modify_B_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
0002f6  4842              LDR      r0,|L3.1024|
0002f8  7901              LDRB     r1,[r0,#4]  ; UART_Buffer_Rece
0002fa  78c0              LDRB     r0,[r0,#3]  ; UART_Buffer_Rece
0002fc  eb012000          ADD      r0,r1,r0,LSL #8
000300  61b0              STR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;211    			
;;;212    			var32a = Modify_B_ACT;
000302  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;213    			var32a = var32a - Modify_A_ACT;
000304  68f1              LDR      r1,[r6,#0xc]  ; Modify_A_ACT
000306  1a40              SUBS     r0,r0,r1
;;;214    			var32a = var32a << 12;
000308  0301              LSLS     r1,r0,#12
;;;215    			var16 = Modify_B_READ - Modify_A_READ;
00030a  6930              LDR      r0,[r6,#0x10]  ; Modify_B_READ
00030c  6872              LDR      r2,[r6,#4]  ; Modify_A_READ
00030e  1a80              SUBS     r0,r0,r2
;;;216    			var32a = var32a / var16;
000310  e000              B        |L3.788|
                  |L3.786|
000312  e2e1              B        |L3.2264|
                  |L3.788|
000314  fbb1f0f0          UDIV     r0,r1,r0
;;;217    			REG_Load_A = var32a;
000318  f8c80004          STR      r0,[r8,#4]  ; Correct_Parametet
;;;218    			var32a = Modify_B_ACT;
00031c  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;219    			var32a = var32a << 12;
00031e  0301              LSLS     r1,r0,#12
;;;220    			var32b = Modify_B_READ;
000320  6932              LDR      r2,[r6,#0x10]  ; Modify_B_READ
;;;221    			var32b = var32b * REG_Load_A;
000322  f8d80004          LDR      r0,[r8,#4]  ; Correct_Parametet
000326  4350              MULS     r0,r2,r0
;;;222    			if (var32a < var32b)
000328  4281              CMP      r1,r0
00032a  d206              BCS      |L3.826|
;;;223    			{
;;;224    				var32b = var32b - var32a;
00032c  1a40              SUBS     r0,r0,r1
;;;225    				REG_LoadA_Offset = var32b;
00032e  6068              STR      r0,[r5,#4]  ; Correct_Strong
;;;226    				Polar1 |= 0x01;
000330  7860              LDRB     r0,[r4,#1]  ; correct_por
000332  f0400001          ORR      r0,r0,#1
000336  7060              STRB     r0,[r4,#1]
000338  e005              B        |L3.838|
                  |L3.826|
;;;227    			}
;;;228    			else 
;;;229    			{
;;;230    				var32a = var32a - var32b;
00033a  1a08              SUBS     r0,r1,r0
;;;231    				REG_LoadA_Offset = var32a;
00033c  6068              STR      r0,[r5,#4]  ; Correct_Strong
;;;232    				Polar1 &= ~0x01;					
00033e  7860              LDRB     r0,[r4,#1]  ; correct_por
000340  f0200001          BIC      r0,r0,#1
000344  7060              STRB     r0,[r4,#1]
                  |L3.838|
;;;233    			}
;;;234    //---------------------------------------------------------------------------------//
;;;235    			var32c = Modify_B_ACT; 
000346  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;236    			var32c = var32c - Modify_A_ACT;
000348  68f1              LDR      r1,[r6,#0xc]  ; Modify_A_ACT
00034a  1a40              SUBS     r0,r0,r1
;;;237    			var32c = var32c << 12;
00034c  0301              LSLS     r1,r0,#12
;;;238    			var16a=Modify_D_READ-Modify_C_READ;
00034e  6970              LDR      r0,[r6,#0x14]  ; Modify_D_READ
000350  68b2              LDR      r2,[r6,#8]  ; Modify_C_READ
000352  1a80              SUBS     r0,r0,r2
;;;239    			var16a=var16a*2;
000354  0040              LSLS     r0,r0,#1
;;;240    			var32c=var32c/var16a;
000356  fbb1f0f0          UDIV     r0,r1,r0
;;;241    			SET_LoadA = var32c;
00035a  f8c80008          STR      r0,[r8,#8]  ; Correct_Parametet
;;;242    			var32c = Modify_B_ACT;
00035e  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;243    			var32c = var32c << 12;
000360  0300              LSLS     r0,r0,#12
;;;244    			var32d = SET_LoadA;
000362  f8d81008          LDR      r1,[r8,#8]  ; Correct_Parametet
;;;245    			var32d = var32d * (Modify_D_READ*2);
000366  6972              LDR      r2,[r6,#0x14]  ; Modify_D_READ
000368  4351              MULS     r1,r2,r1
00036a  0049              LSLS     r1,r1,#1
;;;246    			if (var32c < var32d)
00036c  4288              CMP      r0,r1
00036e  d206              BCS      |L3.894|
;;;247    			{
;;;248    				var32d = var32d - var32c;
000370  1a08              SUBS     r0,r1,r0
;;;249    				SET_LoadA_Offset = var32d;
000372  60a8              STR      r0,[r5,#8]  ; Correct_Strong
;;;250    				Polar1 |= 0x04;
000374  7860              LDRB     r0,[r4,#1]  ; correct_por
000376  f0400004          ORR      r0,r0,#4
00037a  7060              STRB     r0,[r4,#1]
00037c  e005              B        |L3.906|
                  |L3.894|
;;;251    			}
;;;252    			else 
;;;253    			{
;;;254    				var32c = var32c - var32d;
00037e  1a40              SUBS     r0,r0,r1
;;;255    				SET_LoadA_Offset = var32c;
000380  60a8              STR      r0,[r5,#8]  ; Correct_Strong
;;;256    				Polar1 &= ~0x04;
000382  7860              LDRB     r0,[r4,#1]  ; correct_por
000384  f0200004          BIC      r0,r0,#4
000388  7060              STRB     r0,[r4,#1]
                  |L3.906|
;;;257    			}
;;;258    			Flash_Write_all ();	
00038a  f7fffffe          BL       Flash_Write_all
;;;259    			Flag_DAC_OFF =0;
00038e  6838              LDR      r0,[r7,#0]  ; flagB
000390  f0200008          BIC      r0,r0,#8
000394  6038              STR      r0,[r7,#0]  ; flagB
                  |L3.918|
;;;260    		}
;;;261    /*************************************??CV??????У?**************************************************************/
;;;262    		if(UART_Buffer_Rece[1] == 0x05)
000396  481a              LDR      r0,|L3.1024|
000398  7841              LDRB     r1,[r0,#1]  ; UART_Buffer_Rece
00039a  2905              CMP      r1,#5
00039c  d10a              BNE      |L3.948|
;;;263    		{
;;;264    			Modify_A_READ = Vmon1_value;//????
00039e  f8db1000          LDR      r1,[r11,#0]  ; Vmon1_value
0003a2  6071              STR      r1,[r6,#4]  ; Modify_A_READ
;;;265    			Modify_C_READ = Contr_Laod;//?????
0003a4  f8ba1000          LDRH     r1,[r10,#0]  ; Contr_Laod
0003a8  60b1              STR      r1,[r6,#8]  ; Modify_C_READ
;;;266    			Modify_A_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];//????
0003aa  7901              LDRB     r1,[r0,#4]  ; UART_Buffer_Rece
0003ac  78c2              LDRB     r2,[r0,#3]  ; UART_Buffer_Rece
0003ae  eb012102          ADD      r1,r1,r2,LSL #8
0003b2  60f1              STR      r1,[r6,#0xc]  ; Modify_A_ACT
                  |L3.948|
;;;267    		}
;;;268    		if (UART_Buffer_Rece[1] == 0x06)			   //???У???
0003b4  4812              LDR      r0,|L3.1024|
0003b6  7840              LDRB     r0,[r0,#1]  ; UART_Buffer_Rece
0003b8  2806              CMP      r0,#6
0003ba  d168              BNE      |L3.1166|
;;;269    		{
;;;270    			vu32 var16;
;;;271    			vu32 var32a;
;;;272    			vu32 var32b;
;;;273    			
;;;274    			vu32 var16a;
;;;275    			vu32 var32c;
;;;276    			vu32 var32d;
;;;277    			
;;;278    			Modify_B_READ =Vmon1_value;//????
0003bc  f8db0000          LDR      r0,[r11,#0]  ; Vmon1_value
0003c0  6130              STR      r0,[r6,#0x10]  ; Modify_B_READ
;;;279    			Modify_D_READ =Contr_Laod;//?????
0003c2  f8ba0000          LDRH     r0,[r10,#0]  ; Contr_Laod
0003c6  6170              STR      r0,[r6,#0x14]  ; Modify_D_READ
;;;280    			Modify_B_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];//????
0003c8  480d              LDR      r0,|L3.1024|
0003ca  7901              LDRB     r1,[r0,#4]  ; UART_Buffer_Rece
0003cc  78c0              LDRB     r0,[r0,#3]  ; UART_Buffer_Rece
0003ce  eb012000          ADD      r0,r1,r0,LSL #8
0003d2  61b0              STR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;281    			var32a = Modify_B_ACT;
0003d4  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;282    			var32a = var32a - Modify_A_ACT;
0003d6  68f1              LDR      r1,[r6,#0xc]  ; Modify_A_ACT
0003d8  1a40              SUBS     r0,r0,r1
;;;283    			var32a = var32a << 12;
0003da  0301              LSLS     r1,r0,#12
;;;284    			var16 = Modify_B_READ - Modify_A_READ;
0003dc  6930              LDR      r0,[r6,#0x10]  ; Modify_B_READ
0003de  6872              LDR      r2,[r6,#4]  ; Modify_A_READ
0003e0  1a80              SUBS     r0,r0,r2
;;;285    			var32a = var32a / var16;
0003e2  fbb1f0f0          UDIV     r0,r1,r0
;;;286    			REG_LoadV = var32a;
0003e6  f8c8000c          STR      r0,[r8,#0xc]  ; Correct_Parametet
;;;287    			var32a=0;
;;;288    			var32a = Modify_B_ACT;
0003ea  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;289    			var32a = var32a << 12;
0003ec  0301              LSLS     r1,r0,#12
;;;290    			var32b = Modify_B_READ;
0003ee  6932              LDR      r2,[r6,#0x10]  ; Modify_B_READ
;;;291    			var32b = var32b * REG_LoadV;
0003f0  f8d8000c          LDR      r0,[r8,#0xc]  ; Correct_Parametet
0003f4  4350              MULS     r0,r2,r0
;;;292    			if (var32a < var32b)
0003f6  4281              CMP      r1,r0
0003f8  d21d              BCS      |L3.1078|
;;;293    			{
;;;294    				var32b = var32b - var32a;
0003fa  1a40              SUBS     r0,r0,r1
;;;295    				REG_LoadV_Offset = var32b;
0003fc  60e8              STR      r0,[r5,#0xc]  ; Correct_Strong
;;;296    				Polar2 |= 0x01;
0003fe  e015              B        |L3.1068|
                  |L3.1024|
                          DCD      UART_Buffer_Rece
                  |L3.1028|
                          DCD      ||area_number.8||
                  |L3.1032|
                          DCD      UART_Buffer_Send
                  |L3.1036|
                          DCD      Transmit_BUFFERsize
                  |L3.1040|
                          DCD      flagA
                  |L3.1044|
                          DCD      ||.bss||+0x68
                  |L3.1048|
                          DCD      flagF
                  |L3.1052|
                          DCD      Vmon1_value
                  |L3.1056|
                          DCD      flagB
                  |L3.1060|
                          DCD      Imon1_value
                  |L3.1064|
                          DCD      Contr_Laod
                  |L3.1068|
00042c  78a0              LDRB     r0,[r4,#2]  ; correct_por
00042e  f0400001          ORR      r0,r0,#1
000432  70a0              STRB     r0,[r4,#2]
000434  e005              B        |L3.1090|
                  |L3.1078|
;;;297    			}
;;;298    			else 
;;;299    			{
;;;300    				var32a = var32a - var32b;
000436  1a08              SUBS     r0,r1,r0
;;;301    				REG_LoadV_Offset = var32a;
000438  60e8              STR      r0,[r5,#0xc]  ; Correct_Strong
;;;302    				Polar2 &= ~0x01;
00043a  78a0              LDRB     r0,[r4,#2]  ; correct_por
00043c  f0200001          BIC      r0,r0,#1
000440  70a0              STRB     r0,[r4,#2]
                  |L3.1090|
;;;303    			}
;;;304    //---------------------------------------------------------------------------------------//			
;;;305    			var32c = Modify_B_ACT; //CV??????У?
000442  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;306    			var32c = var32c - Modify_A_ACT;
000444  68f1              LDR      r1,[r6,#0xc]  ; Modify_A_ACT
000446  1a40              SUBS     r0,r0,r1
;;;307    			var32c = var32c << 12;
000448  0300              LSLS     r0,r0,#12
;;;308    			var16a=Modify_D_READ-Modify_C_READ;
00044a  6971              LDR      r1,[r6,#0x14]  ; Modify_D_READ
00044c  68b2              LDR      r2,[r6,#8]  ; Modify_C_READ
00044e  1a89              SUBS     r1,r1,r2
;;;309    			var16a=(var16a*2);
000450  0049              LSLS     r1,r1,#1
;;;310    			var32c=var32c/var16a;
000452  fbb0f0f1          UDIV     r0,r0,r1
;;;311    			SET_LoadV = var32c;
000456  f8c80010          STR      r0,[r8,#0x10]  ; Correct_Parametet
;;;312    			var32c = Modify_B_ACT;
00045a  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;313    			var32c = var32c << 12;
00045c  0300              LSLS     r0,r0,#12
;;;314    			var32d = SET_LoadV;
00045e  f8d81010          LDR      r1,[r8,#0x10]  ; Correct_Parametet
;;;315    			var32d = var32d * (Modify_D_READ*2);
000462  6972              LDR      r2,[r6,#0x14]  ; Modify_D_READ
000464  4351              MULS     r1,r2,r1
000466  0049              LSLS     r1,r1,#1
;;;316    			if (var32c < var32d)
000468  4288              CMP      r0,r1
00046a  d206              BCS      |L3.1146|
;;;317    			{
;;;318    				var32d = var32d - var32c;
00046c  1a08              SUBS     r0,r1,r0
;;;319    				SET_LoadV_Offset = var32d;
00046e  6128              STR      r0,[r5,#0x10]  ; Correct_Strong
;;;320    				Polar2 |= 0x04;
000470  78a0              LDRB     r0,[r4,#2]  ; correct_por
000472  f0400004          ORR      r0,r0,#4
000476  70a0              STRB     r0,[r4,#2]
000478  e005              B        |L3.1158|
                  |L3.1146|
;;;321    			}
;;;322    			else 
;;;323    			{
;;;324    				var32c = var32c - var32d;
00047a  1a40              SUBS     r0,r0,r1
;;;325    				SET_LoadV_Offset = var32c;
00047c  6128              STR      r0,[r5,#0x10]  ; Correct_Strong
;;;326    				Polar2 &= ~0x04;
00047e  78a0              LDRB     r0,[r4,#2]  ; correct_por
000480  f0200004          BIC      r0,r0,#4
000484  70a0              STRB     r0,[r4,#2]
                  |L3.1158|
;;;327    			}
;;;328    //---------------------------------------------------------------------------------------//
;;;329    		  Flash_Write_all();	//??д?FLASH
000486  f7fffffe          BL       Flash_Write_all
;;;330    			DAC_Flag=0;
00048a  2000              MOVS     r0,#0
00048c  7030              STRB     r0,[r6,#0]
                  |L3.1166|
;;;331    		}
;;;332    /*************************************??У?**************************************************************************/
;;;333    		if(UART_Buffer_Rece[1] == 0x07||flag_ADJ_VL==1)
00048e  f8dfb3fc          LDR      r11,|L3.2188|
000492  f89b1001          LDRB     r1,[r11,#1]  ; UART_Buffer_Rece
;;;334    		{
;;;335    			Modify_A_READ = Rmon_value;//????
000496  48fe              LDR      r0,|L3.2192|
000498  2907              CMP      r1,#7                 ;333
00049a  d003              BEQ      |L3.1188|
00049c  f8d91000          LDR      r1,[r9,#0]            ;333  ; flagF
0004a0  0749              LSLS     r1,r1,#29             ;333
0004a2  d508              BPL      |L3.1206|
                  |L3.1188|
0004a4  8801              LDRH     r1,[r0,#0]  ; Rmon_value
0004a6  6071              STR      r1,[r6,#4]  ; Modify_A_READ
;;;336    			Modify_A_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];//????
0004a8  f89b1004          LDRB     r1,[r11,#4]  ; UART_Buffer_Rece
0004ac  f89b2003          LDRB     r2,[r11,#3]  ; UART_Buffer_Rece
0004b0  eb012102          ADD      r1,r1,r2,LSL #8
0004b4  60f1              STR      r1,[r6,#0xc]  ; Modify_A_ACT
                  |L3.1206|
;;;337    		}
;;;338    		if (UART_Buffer_Rece[1] == 0x08||flag_ADJ_VH==1)			   //???У???
0004b6  f89b1001          LDRB     r1,[r11,#1]  ; UART_Buffer_Rece
0004ba  2908              CMP      r1,#8
0004bc  d003              BEQ      |L3.1222|
0004be  f8d91000          LDR      r1,[r9,#0]  ; flagF
0004c2  0709              LSLS     r1,r1,#28
0004c4  d55d              BPL      |L3.1410|
                  |L3.1222|
;;;339    		{
;;;340    			vu16 var16;
;;;341    			vu32 var32a;
;;;342    			vu32 var32b;
;;;343    			
;;;344    			vu16 var16a;
;;;345    			vu32 var32c;
;;;346    			vu32 var32d;
;;;347    			Modify_B_READ =Rmon_value;//????
0004c6  8800              LDRH     r0,[r0,#0]  ; Rmon_value
0004c8  6130              STR      r0,[r6,#0x10]  ; Modify_B_READ
;;;348    			flag_OverV=1;
0004ca  49f2              LDR      r1,|L3.2196|
0004cc  6808              LDR      r0,[r1,#0]  ; flagG
0004ce  f0400002          ORR      r0,r0,#2
0004d2  6008              STR      r0,[r1,#0]  ; flagG
;;;349    			Modify_B_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];//????
0004d4  f89b1004          LDRB     r1,[r11,#4]  ; UART_Buffer_Rece
0004d8  f89b2003          LDRB     r2,[r11,#3]  ; UART_Buffer_Rece
0004dc  eb012102          ADD      r1,r1,r2,LSL #8
0004e0  61b1              STR      r1,[r6,#0x18]  ; Modify_B_ACT
;;;350    			if(flag_OverV==1)//??????д?????У???д?FLASH
0004e2  0780              LSLS     r0,r0,#30
0004e4  d547              BPL      |L3.1398|
;;;351    			{
;;;352    				var32a = Modify_B_ACT;
0004e6  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;353    				var32a = var32a - Modify_A_ACT;
0004e8  68f1              LDR      r1,[r6,#0xc]  ; Modify_A_ACT
0004ea  1a40              SUBS     r0,r0,r1
;;;354    				var32a = var32a << 12;
0004ec  0300              LSLS     r0,r0,#12
;;;355    				var16 = Modify_B_READ - Modify_A_READ;
0004ee  6931              LDR      r1,[r6,#0x10]  ; Modify_B_READ
0004f0  6872              LDR      r2,[r6,#4]  ; Modify_A_READ
0004f2  1a89              SUBS     r1,r1,r2
0004f4  b289              UXTH     r1,r1
;;;356    				var32a = var32a / var16;
0004f6  fbb0f0f1          UDIV     r0,r0,r1
;;;357                    if(r_raly == 1)
0004fa  49e7              LDR      r1,|L3.2200|
0004fc  7809              LDRB     r1,[r1,#0]  ; r_raly
0004fe  2901              CMP      r1,#1
000500  d010              BEQ      |L3.1316|
;;;358                    {
;;;359                        REG_CorrectionR = var32a;
;;;360                        var32a=0;
;;;361                        var32a = Modify_B_ACT;
;;;362                        var32a = var32a << 12;
;;;363                        var32b = Modify_B_READ;
;;;364                        var32b = var32b * REG_CorrectionR;
;;;365                        if (var32a < var32b)
;;;366                        {
;;;367                            var32b = var32b - var32a;
;;;368                            REG_ReadR_Offset = var32b;
;;;369                            Polar3 |= 0x01;
;;;370                        }
;;;371                        else 
;;;372                        {
;;;373                            var32a = var32a - var32b;
;;;374                            REG_ReadR_Offset = var32a;
;;;375                            Polar3 &= ~0x01;
;;;376                        }
;;;377                    }else{
;;;378                        REG_CorrectionRL = var32a;
000502  f8c8002c          STR      r0,[r8,#0x2c]  ; Correct_Parametet
;;;379                        var32a=0;
;;;380                        var32a = Modify_B_ACT;
000506  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;381                        var32a = var32a << 12;
000508  0301              LSLS     r1,r0,#12
;;;382                        var32b = Modify_B_READ;
00050a  6932              LDR      r2,[r6,#0x10]  ; Modify_B_READ
;;;383                        var32b = var32b * REG_CorrectionRL;
00050c  f8d8002c          LDR      r0,[r8,#0x2c]  ; Correct_Parametet
000510  4350              MULS     r0,r2,r0
;;;384                        if (var32a < var32b)
000512  4281              CMP      r1,r0
000514  d21e              BCS      |L3.1364|
;;;385                        {
;;;386                            var32b = var32b - var32a;
000516  1a40              SUBS     r0,r0,r1
;;;387                            REG_ReadRL_Offset = var32b;
000518  62e8              STR      r0,[r5,#0x2c]  ; Correct_Strong
;;;388                            Polar3 |= 0x01;
00051a  78e0              LDRB     r0,[r4,#3]  ; correct_por
00051c  f0400001          ORR      r0,r0,#1
000520  70e0              STRB     r0,[r4,#3]
000522  e01d              B        |L3.1376|
                  |L3.1316|
000524  f8c80014          STR      r0,[r8,#0x14]         ;359  ; Correct_Parametet
000528  69b0              LDR      r0,[r6,#0x18]         ;361  ; Modify_B_ACT
00052a  0301              LSLS     r1,r0,#12             ;362
00052c  6932              LDR      r2,[r6,#0x10]         ;363  ; Modify_B_READ
00052e  f8d80014          LDR      r0,[r8,#0x14]         ;364  ; Correct_Parametet
000532  4350              MULS     r0,r2,r0              ;364
000534  4281              CMP      r1,r0                 ;365
000536  d206              BCS      |L3.1350|
000538  1a40              SUBS     r0,r0,r1              ;367
00053a  6168              STR      r0,[r5,#0x14]         ;368  ; Correct_Strong
00053c  78e0              LDRB     r0,[r4,#3]            ;369  ; correct_por
00053e  f0400001          ORR      r0,r0,#1              ;369
000542  70e0              STRB     r0,[r4,#3]            ;369
000544  e00c              B        |L3.1376|
                  |L3.1350|
000546  1a08              SUBS     r0,r1,r0              ;373
000548  6168              STR      r0,[r5,#0x14]         ;374  ; Correct_Strong
00054a  78e0              LDRB     r0,[r4,#3]            ;375  ; correct_por
00054c  f0200001          BIC      r0,r0,#1              ;375
000550  70e0              STRB     r0,[r4,#3]            ;375
000552  e005              B        |L3.1376|
                  |L3.1364|
;;;389                        }
;;;390                        else 
;;;391                        {
;;;392                            var32a = var32a - var32b;
000554  1a08              SUBS     r0,r1,r0
;;;393                            REG_ReadR_Offset = var32a;
000556  6168              STR      r0,[r5,#0x14]  ; Correct_Strong
;;;394                            Polar3 &= ~0x01;
000558  78e0              LDRB     r0,[r4,#3]  ; correct_por
00055a  f0200001          BIC      r0,r0,#1
00055e  70e0              STRB     r0,[r4,#3]
                  |L3.1376|
;;;395                        }
;;;396                    }
;;;397    	//---------------------------------------------------------------------------------------//
;;;398    				Flash_Write_all();	//??д?FLASH
000560  f7fffffe          BL       Flash_Write_all
;;;399    				flag_OverV=0;
000564  48cb              LDR      r0,|L3.2196|
000566  6801              LDR      r1,[r0,#0]  ; flagG
000568  f0210102          BIC      r1,r1,#2
00056c  6001              STR      r1,[r0,#0]  ; flagG
;;;400    				Flag_DAC_OFF=0;
00056e  6838              LDR      r0,[r7,#0]  ; flagB
000570  f0200008          BIC      r0,r0,#8
000574  6038              STR      r0,[r7,#0]  ; flagB
                  |L3.1398|
;;;401    			}
;;;402    			flag_ADJ_VH=0;//????λ??????
000576  f8d90000          LDR      r0,[r9,#0]  ; flagF
00057a  f0200008          BIC      r0,r0,#8
00057e  f8c90000          STR      r0,[r9,#0]  ; flagF
                  |L3.1410|
;;;403    		}		
;;;404    /*******************************??CC???・????У?******************************************/	
;;;405    		if (UART_Buffer_Rece[1] == 0x09||flag_ADJ_ALCC==1)			   //?・?У?
000582  f89b1001          LDRB     r1,[r11,#1]  ; UART_Buffer_Rece
000586  4658              MOV      r0,r11
;;;406    		{
;;;407    			Modify_A_READ = Imon_value;//??・
000588  f8dfb310          LDR      r11,|L3.2204|
00058c  2909              CMP      r1,#9                 ;405
00058e  d003              BEQ      |L3.1432|
000590  f8d91000          LDR      r1,[r9,#0]            ;405  ; flagF
000594  06c9              LSLS     r1,r1,#27             ;405
000596  d50a              BPL      |L3.1454|
                  |L3.1432|
000598  f8bb1000          LDRH     r1,[r11,#0]  ; Imon_value
00059c  6071              STR      r1,[r6,#4]  ; Modify_A_READ
;;;408    			Modify_C_READ = Contr_Current;//???・
00059e  49c0              LDR      r1,|L3.2208|
0005a0  8809              LDRH     r1,[r1,#0]  ; Contr_Current
0005a2  60b1              STR      r1,[r6,#8]  ; Modify_C_READ
;;;409    			Modify_A_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
0005a4  7901              LDRB     r1,[r0,#4]  ; UART_Buffer_Rece
0005a6  78c2              LDRB     r2,[r0,#3]  ; UART_Buffer_Rece
0005a8  eb012102          ADD      r1,r1,r2,LSL #8
0005ac  60f1              STR      r1,[r6,#0xc]  ; Modify_A_ACT
                  |L3.1454|
;;;410    		}
;;;411    
;;;412    		if (UART_Buffer_Rece[1] == 0x0A||flag_ADJ_AHCC==1)			   //?・?У???
0005ae  48b7              LDR      r0,|L3.2188|
0005b0  7840              LDRB     r0,[r0,#1]  ; UART_Buffer_Rece
0005b2  280a              CMP      r0,#0xa
0005b4  d003              BEQ      |L3.1470|
0005b6  f8d90000          LDR      r0,[r9,#0]  ; flagF
0005ba  0680              LSLS     r0,r0,#26
0005bc  d555              BPL      |L3.1642|
                  |L3.1470|
;;;413    		{
;;;414    			vu16 var16;
;;;415    			vu32 var32a;
;;;416    			vu32 var32b;
;;;417    			
;;;418    			vu16 var16a;
;;;419    			vu32 var32c;
;;;420    			vu32 var32d;
;;;421    			
;;;422    			Modify_D_READ = Contr_Current;
0005be  48b8              LDR      r0,|L3.2208|
0005c0  8800              LDRH     r0,[r0,#0]  ; Contr_Current
0005c2  6170              STR      r0,[r6,#0x14]  ; Modify_D_READ
;;;423    			Modify_B_READ = Imon_value;
0005c4  f8bb0000          LDRH     r0,[r11,#0]  ; Imon_value
0005c8  6130              STR      r0,[r6,#0x10]  ; Modify_B_READ
;;;424    			Modify_B_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
0005ca  48b0              LDR      r0,|L3.2188|
0005cc  7901              LDRB     r1,[r0,#4]  ; UART_Buffer_Rece
0005ce  78c0              LDRB     r0,[r0,#3]  ; UART_Buffer_Rece
0005d0  eb012000          ADD      r0,r1,r0,LSL #8
0005d4  61b0              STR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;425    			var32a = Modify_B_ACT;
0005d6  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;426    			var32a = var32a - Modify_A_ACT;
0005d8  68f1              LDR      r1,[r6,#0xc]  ; Modify_A_ACT
0005da  1a40              SUBS     r0,r0,r1
;;;427    			var32a = var32a << 14;
0005dc  0381              LSLS     r1,r0,#14
;;;428    			var16 = Modify_B_READ - Modify_A_READ;
0005de  6930              LDR      r0,[r6,#0x10]  ; Modify_B_READ
0005e0  6872              LDR      r2,[r6,#4]  ; Modify_A_READ
0005e2  1a80              SUBS     r0,r0,r2
0005e4  b280              UXTH     r0,r0
;;;429    			var32a = var32a / var16;
0005e6  fbb1f0f0          UDIV     r0,r1,r0
;;;430    			REG_POWERA = var32a;
0005ea  f8c80018          STR      r0,[r8,#0x18]  ; Correct_Parametet
;;;431    			var32a = Modify_B_ACT;
0005ee  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;432    			var32a = var32a << 14;
0005f0  0381              LSLS     r1,r0,#14
;;;433    			var32b = Modify_B_READ;
0005f2  6932              LDR      r2,[r6,#0x10]  ; Modify_B_READ
;;;434    			var32b = var32b * REG_POWERA;
0005f4  f8d80018          LDR      r0,[r8,#0x18]  ; Correct_Parametet
0005f8  4350              MULS     r0,r2,r0
;;;435    			if (var32a < var32b)
0005fa  4281              CMP      r1,r0
0005fc  d206              BCS      |L3.1548|
;;;436    			{
;;;437    				var32b = var32b - var32a;
0005fe  1a40              SUBS     r0,r0,r1
;;;438    				REG_POWERA_Offset = var32b;
000600  61a8              STR      r0,[r5,#0x18]  ; Correct_Strong
;;;439    				Polar4 |= 0x01;
000602  7920              LDRB     r0,[r4,#4]  ; correct_por
000604  f0400001          ORR      r0,r0,#1
000608  7120              STRB     r0,[r4,#4]
00060a  e005              B        |L3.1560|
                  |L3.1548|
;;;440    			}
;;;441    			else 
;;;442    			{
;;;443    				var32a = var32a - var32b;
00060c  1a08              SUBS     r0,r1,r0
;;;444    				REG_POWERA_Offset = var32a;
00060e  61a8              STR      r0,[r5,#0x18]  ; Correct_Strong
;;;445    				Polar4 &= ~0x01;					//?・????￡?У???
000610  7920              LDRB     r0,[r4,#4]  ; correct_por
000612  f0200001          BIC      r0,r0,#1
000616  7120              STRB     r0,[r4,#4]
                  |L3.1560|
;;;446    			}
;;;447    	//---------------------------------------------------------------------------------//
;;;448    			var32c = Modify_B_ACT; //???・У?
000618  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;449    			var32c = var32c - Modify_A_ACT;
00061a  68f1              LDR      r1,[r6,#0xc]  ; Modify_A_ACT
00061c  1a40              SUBS     r0,r0,r1
;;;450    			var32c = var32c << 14;
00061e  0381              LSLS     r1,r0,#14
;;;451    			var16a=Modify_D_READ-Modify_C_READ;
000620  6970              LDR      r0,[r6,#0x14]  ; Modify_D_READ
000622  68b2              LDR      r2,[r6,#8]  ; Modify_C_READ
000624  1a80              SUBS     r0,r0,r2
;;;452    			var16a=var16a*2;
000626  0440              LSLS     r0,r0,#17
000628  0c00              LSRS     r0,r0,#16
;;;453    			var32c=var32c/var16a;
00062a  fbb1f0f0          UDIV     r0,r1,r0
;;;454    			SET_POWERA = var32c;
00062e  f8c8001c          STR      r0,[r8,#0x1c]  ; Correct_Parametet
;;;455    			var32c = Modify_B_ACT;
000632  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;456    			var32c = var32c << 14;
000634  0380              LSLS     r0,r0,#14
;;;457    			var32d = SET_POWERA;
000636  f8d8101c          LDR      r1,[r8,#0x1c]  ; Correct_Parametet
;;;458    			var32d = var32d * (Modify_D_READ*2);
00063a  6972              LDR      r2,[r6,#0x14]  ; Modify_D_READ
00063c  4351              MULS     r1,r2,r1
00063e  0049              LSLS     r1,r1,#1
;;;459    			if (var32c < var32d)
000640  4288              CMP      r0,r1
000642  d206              BCS      |L3.1618|
;;;460    			{
;;;461    				var32d = var32d - var32c;
000644  1a08              SUBS     r0,r1,r0
;;;462    				SET_POWERA_Offset = var32d;
000646  61e8              STR      r0,[r5,#0x1c]  ; Correct_Strong
;;;463    				Polar4 |= 0x04;
000648  7920              LDRB     r0,[r4,#4]  ; correct_por
00064a  f0400004          ORR      r0,r0,#4
00064e  7120              STRB     r0,[r4,#4]
000650  e005              B        |L3.1630|
                  |L3.1618|
;;;464    			}
;;;465    			else 
;;;466    			{
;;;467    				var32c = var32c - var32d;
000652  1a40              SUBS     r0,r0,r1
;;;468    				SET_POWERA_Offset = var32c;
000654  61e8              STR      r0,[r5,#0x1c]  ; Correct_Strong
;;;469    				Polar4 &= ~0x04;
000656  7920              LDRB     r0,[r4,#4]  ; correct_por
000658  f0200004          BIC      r0,r0,#4
00065c  7120              STRB     r0,[r4,#4]
                  |L3.1630|
;;;470    			}
;;;471    			Flash_Write_all ();	
00065e  f7fffffe          BL       Flash_Write_all
;;;472    			Flag_DAC_OFF=0;
000662  6838              LDR      r0,[r7,#0]  ; flagB
000664  f0200008          BIC      r0,r0,#8
000668  6038              STR      r0,[r7,#0]  ; flagB
                  |L3.1642|
;;;473    		}
;;;474    /*******************************????????У?******************************************/	
;;;475    		if (UART_Buffer_Rece[1] == 0x0B)			   //?・?У?
00066a  f8df9220          LDR      r9,|L3.2188|
00066e  f8991001          LDRB     r1,[r9,#1]  ; UART_Buffer_Rece
;;;476    		{
;;;477    			Modify_A_READ = Vmon_value;//??・
000672  488c              LDR      r0,|L3.2212|
000674  290b              CMP      r1,#0xb               ;475
000676  d10b              BNE      |L3.1680|
000678  8801              LDRH     r1,[r0,#0]  ; Vmon_value
00067a  6071              STR      r1,[r6,#4]  ; Modify_A_READ
;;;478    			Modify_C_READ = Contr_Voltage;//???・
00067c  498a              LDR      r1,|L3.2216|
00067e  8809              LDRH     r1,[r1,#0]  ; Contr_Voltage
000680  60b1              STR      r1,[r6,#8]  ; Modify_C_READ
;;;479    			Modify_A_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
000682  f8991004          LDRB     r1,[r9,#4]  ; UART_Buffer_Rece
000686  f8992003          LDRB     r2,[r9,#3]  ; UART_Buffer_Rece
00068a  eb012102          ADD      r1,r1,r2,LSL #8
00068e  60f1              STR      r1,[r6,#0xc]  ; Modify_A_ACT
                  |L3.1680|
;;;480    		}
;;;481    
;;;482    		if (UART_Buffer_Rece[1] == 0x0C)			   //?・?У???
000690  f8991001          LDRB     r1,[r9,#1]  ; UART_Buffer_Rece
000694  290c              CMP      r1,#0xc
000696  d155              BNE      |L3.1860|
;;;483    		{
;;;484    			vu16 var16;
;;;485    			vu32 var32a;
;;;486    			vu32 var32b;
;;;487    			
;;;488    			vu16 var16a;
;;;489    			vu32 var32c;
;;;490    			vu32 var32d;
;;;491    			
;;;492    			Modify_D_READ = Contr_Voltage;
000698  4983              LDR      r1,|L3.2216|
00069a  8809              LDRH     r1,[r1,#0]  ; Contr_Voltage
00069c  6171              STR      r1,[r6,#0x14]  ; Modify_D_READ
;;;493    			Modify_B_READ = Vmon_value;
00069e  8800              LDRH     r0,[r0,#0]  ; Vmon_value
0006a0  6130              STR      r0,[r6,#0x10]  ; Modify_B_READ
;;;494    			Modify_B_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
0006a2  f8990004          LDRB     r0,[r9,#4]  ; UART_Buffer_Rece
0006a6  f8991003          LDRB     r1,[r9,#3]  ; UART_Buffer_Rece
0006aa  eb002001          ADD      r0,r0,r1,LSL #8
0006ae  61b0              STR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;495    			var32a = Modify_B_ACT;
0006b0  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;496    			var32a = var32a - Modify_A_ACT;
0006b2  68f1              LDR      r1,[r6,#0xc]  ; Modify_A_ACT
0006b4  1a40              SUBS     r0,r0,r1
;;;497    			var32a = var32a << 14;
0006b6  0381              LSLS     r1,r0,#14
;;;498    			var16 = Modify_B_READ - Modify_A_READ;
0006b8  6930              LDR      r0,[r6,#0x10]  ; Modify_B_READ
0006ba  6872              LDR      r2,[r6,#4]  ; Modify_A_READ
0006bc  1a80              SUBS     r0,r0,r2
0006be  b280              UXTH     r0,r0
;;;499    			var32a = var32a / var16;
0006c0  fbb1f0f0          UDIV     r0,r1,r0
;;;500    			REG_POWERV = var32a;
0006c4  f8c80020          STR      r0,[r8,#0x20]  ; Correct_Parametet
;;;501    			var32a = Modify_B_ACT;
0006c8  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;502    			var32a = var32a << 14;
0006ca  0381              LSLS     r1,r0,#14
;;;503    			var32b = Modify_B_READ;
0006cc  6932              LDR      r2,[r6,#0x10]  ; Modify_B_READ
;;;504    			var32b = var32b * REG_POWERV;
0006ce  f8d80020          LDR      r0,[r8,#0x20]  ; Correct_Parametet
0006d2  4350              MULS     r0,r2,r0
;;;505    			if (var32a < var32b)
0006d4  4281              CMP      r1,r0
0006d6  d206              BCS      |L3.1766|
;;;506    			{
;;;507    				var32b = var32b - var32a;
0006d8  1a40              SUBS     r0,r0,r1
;;;508    				REG_POWERV_Offset = var32b;
0006da  6228              STR      r0,[r5,#0x20]  ; Correct_Strong
;;;509    				Polar5 |= 0x01;
0006dc  7960              LDRB     r0,[r4,#5]  ; correct_por
0006de  f0400001          ORR      r0,r0,#1
0006e2  7160              STRB     r0,[r4,#5]
0006e4  e005              B        |L3.1778|
                  |L3.1766|
;;;510    			}
;;;511    			else 
;;;512    			{
;;;513    				var32a = var32a - var32b;
0006e6  1a08              SUBS     r0,r1,r0
;;;514    				REG_POWERV_Offset = var32a;
0006e8  6228              STR      r0,[r5,#0x20]  ; Correct_Strong
;;;515    				Polar5 &= ~0x01;					
0006ea  7960              LDRB     r0,[r4,#5]  ; correct_por
0006ec  f0200001          BIC      r0,r0,#1
0006f0  7160              STRB     r0,[r4,#5]
                  |L3.1778|
;;;516    			}
;;;517    	//---------------------------------------------------------------------------------//
;;;518    			var32c = Modify_B_ACT; //????У?
0006f2  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;519    			var32c = var32c - Modify_A_ACT;
0006f4  68f1              LDR      r1,[r6,#0xc]  ; Modify_A_ACT
0006f6  1a40              SUBS     r0,r0,r1
;;;520    			var32c = var32c << 14;
0006f8  0381              LSLS     r1,r0,#14
;;;521    			var16a=Modify_D_READ-Modify_C_READ;
0006fa  6970              LDR      r0,[r6,#0x14]  ; Modify_D_READ
0006fc  68b2              LDR      r2,[r6,#8]  ; Modify_C_READ
0006fe  1a80              SUBS     r0,r0,r2
;;;522    			var16a=var16a*2;
000700  0440              LSLS     r0,r0,#17
000702  0c00              LSRS     r0,r0,#16
;;;523    			var32c=var32c/var16a;
000704  fbb1f0f0          UDIV     r0,r1,r0
;;;524    			SET_POWERV = var32c;
000708  f8c80024          STR      r0,[r8,#0x24]  ; Correct_Parametet
;;;525    			var32c = Modify_B_ACT;
00070c  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;526    			var32c = var32c << 14;
00070e  0380              LSLS     r0,r0,#14
;;;527    			var32d = SET_POWERV;
000710  f8d81024          LDR      r1,[r8,#0x24]  ; Correct_Parametet
;;;528    			var32d = var32d * (Modify_D_READ*2);
000714  6972              LDR      r2,[r6,#0x14]  ; Modify_D_READ
000716  4351              MULS     r1,r2,r1
000718  0049              LSLS     r1,r1,#1
;;;529    			if (var32c < var32d)
00071a  4288              CMP      r0,r1
00071c  d206              BCS      |L3.1836|
;;;530    			{
;;;531    				var32d = var32d - var32c;
00071e  1a08              SUBS     r0,r1,r0
;;;532    				SET_POWERV_Offset = var32d;
000720  6268              STR      r0,[r5,#0x24]  ; Correct_Strong
;;;533    				Polar5 |= 0x04;
000722  7960              LDRB     r0,[r4,#5]  ; correct_por
000724  f0400004          ORR      r0,r0,#4
000728  7160              STRB     r0,[r4,#5]
00072a  e005              B        |L3.1848|
                  |L3.1836|
;;;534    			}
;;;535    			else 
;;;536    			{
;;;537    				var32c = var32c - var32d;
00072c  1a40              SUBS     r0,r0,r1
;;;538    				SET_POWERV_Offset = var32c;
00072e  6268              STR      r0,[r5,#0x24]  ; Correct_Strong
;;;539    				Polar5 &= ~0x04;
000730  7960              LDRB     r0,[r4,#5]  ; correct_por
000732  f0200004          BIC      r0,r0,#4
000736  7160              STRB     r0,[r4,#5]
                  |L3.1848|
;;;540    			}
;;;541    			Flash_Write_all ();	
000738  f7fffffe          BL       Flash_Write_all
;;;542    			Flag_DAC_OFF=0;
00073c  6838              LDR      r0,[r7,#0]  ; flagB
00073e  f0200008          BIC      r0,r0,#8
000742  6038              STR      r0,[r7,#0]  ; flagB
                  |L3.1860|
;;;543    		}
;;;544    /****************???・?У?**********************************/
;;;545    		if (UART_Buffer_Rece[1] == 0x0D)			  
000744  f8990001          LDRB     r0,[r9,#1]  ; UART_Buffer_Rece
000748  280d              CMP      r0,#0xd
00074a  d109              BNE      |L3.1888|
;;;546    		{ 
;;;547    			Modify_A_READ = Imon_value;
00074c  f8bb0000          LDRH     r0,[r11,#0]  ; Imon_value
000750  6070              STR      r0,[r6,#4]  ; Modify_A_READ
;;;548    			Modify_A_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
000752  f8990004          LDRB     r0,[r9,#4]  ; UART_Buffer_Rece
000756  f8991003          LDRB     r1,[r9,#3]  ; UART_Buffer_Rece
00075a  eb002001          ADD      r0,r0,r1,LSL #8
00075e  60f0              STR      r0,[r6,#0xc]  ; Modify_A_ACT
                  |L3.1888|
;;;549    		}
;;;550    
;;;551    		if (UART_Buffer_Rece[1] == 0x0E)			   
000760  f8990001          LDRB     r0,[r9,#1]  ; UART_Buffer_Rece
000764  280e              CMP      r0,#0xe
000766  d130              BNE      |L3.1994|
;;;552    		{
;;;553    			vu16 var16;
;;;554    			vu32 var32a;
;;;555    			vu32 var32b;
;;;556    			
;;;557    			vu16 var16a;
;;;558    			vu32 var32c;
;;;559    			vu32 var32d;
;;;560    			
;;;561    			Modify_B_READ = Imon_value;
000768  f8bb0000          LDRH     r0,[r11,#0]  ; Imon_value
00076c  6130              STR      r0,[r6,#0x10]  ; Modify_B_READ
;;;562    			Modify_B_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
00076e  f8990004          LDRB     r0,[r9,#4]  ; UART_Buffer_Rece
000772  f8991003          LDRB     r1,[r9,#3]  ; UART_Buffer_Rece
000776  eb002001          ADD      r0,r0,r1,LSL #8
00077a  61b0              STR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;563    			var32a = Modify_B_ACT;
00077c  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;564    			var32a = var32a - Modify_A_ACT;
00077e  68f1              LDR      r1,[r6,#0xc]  ; Modify_A_ACT
000780  1a40              SUBS     r0,r0,r1
;;;565    			var32a = var32a << 14;
000782  0381              LSLS     r1,r0,#14
;;;566    			var16 = Modify_B_READ - Modify_A_READ;
000784  6930              LDR      r0,[r6,#0x10]  ; Modify_B_READ
000786  6872              LDR      r2,[r6,#4]  ; Modify_A_READ
000788  1a80              SUBS     r0,r0,r2
00078a  b280              UXTH     r0,r0
;;;567    			var32a = var32a / var16;
00078c  fbb1f0f0          UDIV     r0,r1,r0
;;;568    			CON_POWERA = var32a;
000790  f8c80028          STR      r0,[r8,#0x28]  ; Correct_Parametet
;;;569    			var32a = Modify_B_ACT;
000794  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;570    			var32a = var32a << 14;
000796  0381              LSLS     r1,r0,#14
;;;571    			var32b = Modify_B_READ;
000798  6932              LDR      r2,[r6,#0x10]  ; Modify_B_READ
;;;572    			var32b = var32b * CON_POWERA;
00079a  f8d80028          LDR      r0,[r8,#0x28]  ; Correct_Parametet
00079e  4350              MULS     r0,r2,r0
;;;573    			if (var32a < var32b)
0007a0  4281              CMP      r1,r0
0007a2  d206              BCS      |L3.1970|
;;;574    			{
;;;575    				var32b = var32b - var32a;
0007a4  1a40              SUBS     r0,r0,r1
;;;576    				CON_POWERA_Offset = var32b;
0007a6  62a8              STR      r0,[r5,#0x28]  ; Correct_Strong
;;;577    				Polar3 |= 0x04;
0007a8  78e0              LDRB     r0,[r4,#3]  ; correct_por
0007aa  f0400004          ORR      r0,r0,#4
0007ae  70e0              STRB     r0,[r4,#3]
0007b0  e005              B        |L3.1982|
                  |L3.1970|
;;;578    			}
;;;579    			else 
;;;580    			{
;;;581    				var32a = var32a - var32b;
0007b2  1a08              SUBS     r0,r1,r0
;;;582    				CON_POWERA_Offset = var32a;
0007b4  62a8              STR      r0,[r5,#0x28]  ; Correct_Strong
;;;583    				Polar3 &= ~0x04;					
0007b6  78e0              LDRB     r0,[r4,#3]  ; correct_por
0007b8  f0200004          BIC      r0,r0,#4
0007bc  70e0              STRB     r0,[r4,#3]
                  |L3.1982|
;;;584    			}
;;;585    			Flash_Write_all ();	
0007be  f7fffffe          BL       Flash_Write_all
;;;586    			Flag_DAC_OFF=0;
0007c2  6838              LDR      r0,[r7,#0]  ; flagB
0007c4  f0200008          BIC      r0,r0,#8
0007c8  6038              STR      r0,[r7,#0]  ; flagB
                  |L3.1994|
;;;587    		}
;;;588    /****************漏电流校准**********************************/
;;;589    		if (UART_Buffer_Rece[1] == 0x22)			  
0007ca  f8991001          LDRB     r1,[r9,#1]  ; UART_Buffer_Rece
;;;590    		{ 
;;;591    			Modify_A_READ = LowImon_value;
0007ce  4837              LDR      r0,|L3.2220|
0007d0  2922              CMP      r1,#0x22              ;589
0007d2  d108              BNE      |L3.2022|
0007d4  8801              LDRH     r1,[r0,#0]  ; LowImon_value
0007d6  6071              STR      r1,[r6,#4]  ; Modify_A_READ
;;;592    			Modify_A_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
0007d8  f8991004          LDRB     r1,[r9,#4]  ; UART_Buffer_Rece
0007dc  f8992003          LDRB     r2,[r9,#3]  ; UART_Buffer_Rece
0007e0  eb012102          ADD      r1,r1,r2,LSL #8
0007e4  60f1              STR      r1,[r6,#0xc]  ; Modify_A_ACT
                  |L3.2022|
;;;593    		}
;;;594    
;;;595    		if (UART_Buffer_Rece[1] == 0x23)			   
0007e6  f8991001          LDRB     r1,[r9,#1]  ; UART_Buffer_Rece
0007ea  2923              CMP      r1,#0x23
0007ec  d131              BNE      |L3.2130|
;;;596    		{
;;;597    			vu16 var16;
;;;598    			vu32 var32a;
;;;599    			vu32 var32b;
;;;600    			
;;;601    			vu16 var16a;
;;;602    			vu32 var32c;
;;;603    			vu32 var32d;
;;;604    			
;;;605    			Modify_B_READ = LowImon_value;
0007ee  8800              LDRH     r0,[r0,#0]  ; LowImon_value
0007f0  6130              STR      r0,[r6,#0x10]  ; Modify_B_READ
;;;606    			Modify_B_ACT = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
0007f2  f8990004          LDRB     r0,[r9,#4]  ; UART_Buffer_Rece
0007f6  f8991003          LDRB     r1,[r9,#3]  ; UART_Buffer_Rece
0007fa  eb002001          ADD      r0,r0,r1,LSL #8
0007fe  61b0              STR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;607    			var32a = Modify_B_ACT;
000800  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;608    			var32a = var32a - Modify_A_ACT;
000802  68f1              LDR      r1,[r6,#0xc]  ; Modify_A_ACT
000804  1a40              SUBS     r0,r0,r1
;;;609    			var32a = var32a << 14;
000806  0381              LSLS     r1,r0,#14
;;;610    			var16 = Modify_B_READ - Modify_A_READ;
000808  6930              LDR      r0,[r6,#0x10]  ; Modify_B_READ
00080a  6872              LDR      r2,[r6,#4]  ; Modify_A_READ
00080c  1a80              SUBS     r0,r0,r2
00080e  b280              UXTH     r0,r0
;;;611    			var32a = var32a / var16;
000810  fbb1f0f0          UDIV     r0,r1,r0
;;;612    			REG_LEAKI = var32a;
000814  f8c80030          STR      r0,[r8,#0x30]  ; Correct_Parametet
;;;613    			var32a = Modify_B_ACT;
000818  69b0              LDR      r0,[r6,#0x18]  ; Modify_B_ACT
;;;614    			var32a = var32a << 14;
00081a  0381              LSLS     r1,r0,#14
;;;615    			var32b = Modify_B_READ;
00081c  6932              LDR      r2,[r6,#0x10]  ; Modify_B_READ
;;;616    			var32b = var32b * REG_LEAKI;
00081e  f8d80030          LDR      r0,[r8,#0x30]  ; Correct_Parametet
000822  4350              MULS     r0,r2,r0
;;;617    			if (var32a < var32b)
000824  4281              CMP      r1,r0
000826  d207              BCS      |L3.2104|
;;;618    			{
;;;619    				var32b = var32b - var32a;
000828  1a40              SUBS     r0,r0,r1
;;;620    				REG_LEAKI_Offset = var32b;
00082a  f8c80030          STR      r0,[r8,#0x30]  ; Correct_Parametet
;;;621    				Polar3 |= 0x04;
00082e  78e0              LDRB     r0,[r4,#3]  ; correct_por
000830  f0400004          ORR      r0,r0,#4
000834  70e0              STRB     r0,[r4,#3]
000836  e006              B        |L3.2118|
                  |L3.2104|
;;;622    			}
;;;623    			else 
;;;624    			{
;;;625    				var32a = var32a - var32b;
000838  1a08              SUBS     r0,r1,r0
;;;626    				REG_LEAKI_Offset = var32a;
00083a  f8c80030          STR      r0,[r8,#0x30]  ; Correct_Parametet
;;;627    				Polar3 &= ~0x04;					
00083e  78e0              LDRB     r0,[r4,#3]  ; correct_por
000840  f0200004          BIC      r0,r0,#4
000844  70e0              STRB     r0,[r4,#3]
                  |L3.2118|
;;;628    			}
;;;629    			Flash_Write_all ();	
000846  f7fffffe          BL       Flash_Write_all
;;;630    			Flag_DAC_OFF=0;
00084a  6838              LDR      r0,[r7,#0]  ; flagB
00084c  f0200008          BIC      r0,r0,#8
000850  6038              STR      r0,[r7,#0]  ; flagB
                  |L3.2130|
;;;631    		}
;;;632    /***********??DAC*******************************************/
;;;633    		if (UART_Buffer_Rece[1] == 0x0F)			   
000852  f8990001          LDRB     r0,[r9,#1]  ; UART_Buffer_Rece
000856  280f              CMP      r0,#0xf
000858  d10b              BNE      |L3.2162|
;;;634    		{
;;;635    			Contr_Laod = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
00085a  f8990004          LDRB     r0,[r9,#4]  ; UART_Buffer_Rece
00085e  f8991003          LDRB     r1,[r9,#3]  ; UART_Buffer_Rece
000862  eb002001          ADD      r0,r0,r1,LSL #8
000866  f8aa0000          STRH     r0,[r10,#0]
;;;636    			Flag_DAC_OFF=1;
00086a  6838              LDR      r0,[r7,#0]  ; flagB
00086c  f0400008          ORR      r0,r0,#8
000870  6038              STR      r0,[r7,#0]  ; flagB
                  |L3.2162|
;;;637    		}
;;;638    		if (UART_Buffer_Rece[1] == 0x20)			   
000872  f8990001          LDRB     r0,[r9,#1]  ; UART_Buffer_Rece
000876  2820              CMP      r0,#0x20
000878  d11e              BNE      |L3.2232|
;;;639    		{
;;;640    			Contr_Voltage = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
00087a  f8990004          LDRB     r0,[r9,#4]  ; UART_Buffer_Rece
00087e  f8991003          LDRB     r1,[r9,#3]  ; UART_Buffer_Rece
000882  eb002001          ADD      r0,r0,r1,LSL #8
000886  4908              LDR      r1,|L3.2216|
000888  8008              STRH     r0,[r1,#0]
;;;641    			Flag_DAC_OFF=1;
00088a  e011              B        |L3.2224|
                  |L3.2188|
                          DCD      UART_Buffer_Rece
                  |L3.2192|
                          DCD      Rmon_value
                  |L3.2196|
                          DCD      flagG
                  |L3.2200|
                          DCD      r_raly
                  |L3.2204|
                          DCD      Imon_value
                  |L3.2208|
                          DCD      Contr_Current
                  |L3.2212|
                          DCD      Vmon_value
                  |L3.2216|
                          DCD      Contr_Voltage
                  |L3.2220|
                          DCD      LowImon_value
                  |L3.2224|
0008b0  6838              LDR      r0,[r7,#0]  ; flagB
0008b2  f0400008          ORR      r0,r0,#8
0008b6  6038              STR      r0,[r7,#0]  ; flagB
                  |L3.2232|
;;;642    		}
;;;643    		if (UART_Buffer_Rece[1] == 0x21)			   
0008b8  f8990001          LDRB     r0,[r9,#1]  ; UART_Buffer_Rece
0008bc  2821              CMP      r0,#0x21
0008be  d10b              BNE      |L3.2264|
;;;644    		{
;;;645    			Contr_Current = (UART_Buffer_Rece[3] << 8) + UART_Buffer_Rece[4];
0008c0  f8990004          LDRB     r0,[r9,#4]  ; UART_Buffer_Rece
0008c4  f8991003          LDRB     r1,[r9,#3]  ; UART_Buffer_Rece
0008c8  eb002001          ADD      r0,r0,r1,LSL #8
0008cc  4903              LDR      r1,|L3.2268|
0008ce  8008              STRH     r0,[r1,#0]
;;;646    			Flag_DAC_OFF=1;
0008d0  6838              LDR      r0,[r7,#0]  ; flagB
0008d2  f0400008          ORR      r0,r0,#8
0008d6  6038              STR      r0,[r7,#0]  ; flagB
                  |L3.2264|
;;;647    		}
;;;648    	}
;;;649    //===================================================================================
;;;650    }
0008d8  e8bd9ff0          POP      {r4-r12,pc}
;;;651    //===============================AD值转换成测量值============================================//
                          ENDP

                  |L3.2268|
                          DCD      Contr_Current

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Correct_Parametet
                          %        52
                  Correct_Strong
                          %        52
                  Run_Control
                          %        168

                          AREA ||.data||, DATA, ALIGN=1

                  ADJ_Write
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.8||, DATA, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.data||
                  DAC_Flag
000000  00                DCB      0x00
                  ADDR
000001  000000            DCB      0x00,0x00,0x00
                  Modify_A_READ
                          DCD      0x00000000
                  Modify_C_READ
                          DCD      0x00000000
                  Modify_A_ACT
                          DCD      0x00000000
                  Modify_B_READ
                          DCD      0x00000000
                  Modify_D_READ
                          DCD      0x00000000
                  Modify_B_ACT
                          DCD      0x00000000
                  correct_por
                          DCD      0x00000000
000020  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\drive\\modbus.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_modbus_c_bae18981____REV16|
#line 114 "D:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_modbus_c_bae18981____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___8_modbus_c_bae18981____REVSH|
#line 128
|__asm___8_modbus_c_bae18981____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
